You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include <cmath>
#include <unordered_map>
#include <set>
#ifdef _OPENMP
#include <omp.h>
#endif

// Mimic the expensive two-electron integral loops from Ambit.
// The original version always launches an OpenMP parallel region
// even when only checking integral sizes.

unsigned int CalculateTwoElectronIntegrals(bool check_size_only, int size) {
    std::set<int> found_keys;
    std::unordered_map<int,double> integrals;

#pragma omp parallel
    {
#pragma omp for schedule(static)
        for (int i1 = 0; i1 < size; ++i1) {
            for (int i2 = 0; i2 < size; ++i2) {
                for (int i3 = 0; i3 < size; ++i3) {
                    for (int i4 = 0; i4 < size; ++i4) {
                        int key = (((i1 * size + i2) * size + i3) * size + i4);
                        if (check_size_only) {
#ifdef _OPENMP
#pragma omp critical(TWO_ELECTRON_SLATER)
#endif
                            found_keys.insert(key);
                        } else {
                            double radial = std::sin(i1 * i2 + i3 * i4) *
                                             std::sqrt(i1 + i2 + i3 + i4 + 1.0);
#ifdef _OPENMP
#pragma omp critical(TWO_ELECTRON_SLATER)
#endif
                            integrals[key] = radial;
                        }
                    }
                }
            }
        }
    }
    return check_size_only ? found_keys.size() : integrals.size();
}


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include <chrono>
#include <iostream>
#include <string>

// Declaration of the benchmark function implemented in original.cpp or optimized.cpp
unsigned int CalculateTwoElectronIntegrals(bool check_size_only, int size);

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    int size = 60;      // workload dimension
    int repeat = 1;

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg.rfind("--size=",0)==0) size = std::stoi(arg.substr(7));
        else if (arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
    }

    if (mode == "correct") {
        unsigned int res = CalculateTwoElectronIntegrals(false, size);
        std::cout << res << '\n';
        return 0;
    }

    using clock = std::chrono::high_resolution_clock;
    auto t1 = clock::now();
    unsigned int dummy = 0;
    for (int r = 0; r < repeat; ++r) {
        dummy += CalculateTwoElectronIntegrals(true, size);
    }
    auto t2 = clock::now();

    std::cout << "Time: "
              << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
              << " ms\n";
    if (dummy == 123456789u) std::cerr << "";
    return 0;
}


Previous attempt info:
Original execution time: mean = 7465.20 ms, std = 1684.28 ms