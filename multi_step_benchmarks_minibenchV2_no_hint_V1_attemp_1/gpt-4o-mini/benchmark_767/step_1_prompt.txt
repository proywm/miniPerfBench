You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include <cstddef>

// Naive matrix multiplication of A[m x k] and B[k x n]
static void gemm(const float* a, const float* b,
                 bool trans_a, bool trans_b,
                 int m, int n, int k,
                 float alpha, float beta,
                 float* c)
{
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            float sum = 0.f;
            for (int p = 0; p < k; ++p) {
                float av = trans_a ? a[p * m + i] : a[i * k + p];
                float bv = trans_b ? b[j * k + p] : b[p * n + j];
                sum += av * bv;
            }
            c[i * n + j] = alpha * sum + beta * c[i * n + j];
        }
    }
}

// Sequential batched GEMM
void gemm_batch(const float* a, const float* b,
                bool transpose_a, bool transpose_b,
                int batch_size,
                int m, int n, int k,
                float alpha, float beta,
                float* c)
{
    for (int i = 0; i < batch_size; ++i) {
        const float* a_i = a + i * m * k;
        const float* b_i = b + i * k * n;
        float* c_i = c + i * m * n;
        gemm(a_i, b_i, transpose_a, transpose_b, m, n, k, alpha, beta, c_i);
    }
}


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include <vector>
#include <random>
#include <chrono>
#include <iostream>
#include <string>

void gemm_batch(const float* a, const float* b,
                bool transpose_a, bool transpose_b,
                int batch_size, int m, int n, int k,
                float alpha, float beta, float* c);

int main(int argc, char* argv[])
{
    std::string mode = "perf";
    int batch = 32;
    int m = 128, n = 128, k = 128;
    int repeat = 120;

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
    }

    std::vector<float> A(batch * m * k);
    std::vector<float> B(batch * k * n);
    std::vector<float> C(batch * m * n);
    std::mt19937 gen(42);
    std::uniform_real_distribution<float> dist(0.f,1.f);
    for (float& v : A) v = dist(gen);
    for (float& v : B) v = dist(gen);

    if (mode == "correct") {
        gemm_batch(A.data(), B.data(), false, false,
                   batch, m, n, k, 1.f, 0.f, C.data());
        double sum = 0.0;
        for (float v : C) sum += v;
        std::cout << sum << '\n';
    } else {
        using clock = std::chrono::high_resolution_clock;
        auto t1 = clock::now();
        for (int r = 0; r < repeat; ++r) {
            gemm_batch(A.data(), B.data(), false, false,
                       batch, m, n, k, 1.f, 0.f, C.data());
        }
        auto t2 = clock::now();
        std::cout << "Time: "
                  << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
                  << " ms\n";
    }
    return 0;
}


Previous attempt info:
Original execution time: mean = 7053.80 ms, std = 16.54 ms