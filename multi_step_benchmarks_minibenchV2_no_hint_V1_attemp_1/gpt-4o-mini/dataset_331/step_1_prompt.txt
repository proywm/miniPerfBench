You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include <vector>
#include <ctime>

// Simulate the expensive conversion from time_t to QDateTime for every entry.
extern "C" double run(int repeat, size_t size) {
    std::vector<time_t> steps(size);
    std::vector<double> values(size);
    time_t start = std::time(nullptr);
    for (size_t i = 0; i < size; ++i) {
        steps[i] = start + static_cast<time_t>(i * 60);
        values[i] = static_cast<double>(i);
    }

    std::tm current_tm;
    time_t current_time = start + static_cast<time_t>((size / 2) * 60);
    localtime_r(&current_time, &current_tm);
    time_t current_time_t = mktime(&current_tm);

    double result = 0.0;
    std::tm tmp;
    for (int r = 0; r < repeat; ++r) {
        for (size_t i = 0; i < steps.size(); ++i) {
            localtime_r(&steps[i], &tmp);             // fromTime_t equivalent
            time_t t = mktime(&tmp);
            if (t > current_time_t) {
                result += values[i];
                break;
            }
        }
    }
    return result;
}


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include <chrono>
#include <iostream>
#include <string>

extern "C" double run(int repeat, size_t size);

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    int repeat = 20;           // outer loop iterations
    size_t size = 1000000;     // number of timestamps

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
        else if (arg.rfind("--size=",0)==0) size = std::stoul(arg.substr(7));
    }

    if (mode == "correct") {
        double result = run(1, size);
        std::cout << result << '\n';
        return 0;
    }

    using clock = std::chrono::high_resolution_clock;
    auto t1 = clock::now();
    double val = run(repeat, size);
    auto t2 = clock::now();
    std::cout << "Time: "
              << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
              << " ms\n";
    // prevent optimization
    if (val == -1.2345) std::cerr << val;
    return 0;
}


Previous attempt info:
Original execution time: mean = 28765.60 ms, std = 65.47 ms