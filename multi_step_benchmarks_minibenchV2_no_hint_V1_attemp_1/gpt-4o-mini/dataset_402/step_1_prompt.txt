You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include <vector>
#include <string>
#include <algorithm>

long long render(const std::vector<std::string>& items,
                 std::size_t scrollOffset,
                 int lineHeight,
                 int areaHeight)
{
    long long sum = 0;
    int y = -static_cast<int>(scrollOffset);
    for (std::size_t i = 0; i < items.size(); ++i) {
        bool visible = (y + lineHeight > 0) && (y < areaHeight);
        if (visible) {
            for (char c : items[i]) sum += c;
            sum += y;
        }
        y += lineHeight;
    }
    return sum;
}


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include <chrono>
#include <iostream>
#include <string>
#include <vector>

long long render(const std::vector<std::string>& items, std::size_t scrollOffset, int lineHeight, int areaHeight);

std::vector<std::string> make_items(std::size_t n) {
    std::vector<std::string> items(n);
    for (std::size_t i = 0; i < n; ++i) {
        items[i] = "Item" + std::to_string(i);
    }
    return items;
}

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    std::size_t size = 1000000; // number of list items
    int repeat = 25000;         // number of frames

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg.rfind("--size=",0)==0) size = static_cast<std::size_t>(std::stoul(arg.substr(7)));
        else if (arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
    }

    const int lineHeight = 16;
    const int areaHeight = 480;
    const std::size_t scrollOffset = 200; // pixels scrolled

    std::vector<std::string> items = make_items(size);

    if (mode == "correct") {
        long long result = render(items, scrollOffset, lineHeight, areaHeight);
        std::cout << result << '\n';
    } else {
        using clock = std::chrono::high_resolution_clock;
        long long dummy = 0;
        auto t1 = clock::now();
        for (int i = 0; i < repeat; ++i) {
            dummy += render(items, scrollOffset, lineHeight, areaHeight);
        }
        auto t2 = clock::now();
        std::cout << "Time: "
                  << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
                  << " ms\n";
        if (dummy == 123456789) std::cerr << "";
    }
    return 0;
}


Previous attempt info:
Original execution time: mean = 11046.20 ms, std = 5.17 ms