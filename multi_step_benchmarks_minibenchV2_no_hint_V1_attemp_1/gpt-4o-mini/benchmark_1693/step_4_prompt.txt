You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include "search.hpp"
#include <omp.h>

// Default static scheduling
size_t dem_fem_search(const ParticleVector& elements) {
    const std::size_t MaxNumberOfElements = elements.size();
    std::vector<std::vector<ParticlePtr>> rResults(elements.size());
    std::vector<std::vector<double>> rResultsDistance(elements.size());

    double mGlobal_BB_LowPoint[3] = {-1.0, -1.0, -1.0};
    double mGlobal_BB_HighPoint[3] = { 1.0,  1.0,  1.0};

    #pragma omp parallel
    {
        std::vector<ParticlePtr> localResults(MaxNumberOfElements);
        std::vector<double> localResultsDistances(MaxNumberOfElements);
        std::size_t NumberOfResults = 0;

        #pragma omp for
        for (int p = 0; p < static_cast<int>(elements.size()); ++p) {
            auto go_it = elements[p];
            bool search_particle = true;
            const double* aux_coor = go_it->coord.data();
            SphericParticle* p_particle = go_it.get();
            double Rad = p_particle->radius;

            for (unsigned int i = 0; i < 3; ++i)
                search_particle &= !(aux_coor[i] < (mGlobal_BB_LowPoint[i] - Rad)) ||
                                   (aux_coor[i] > (mGlobal_BB_HighPoint[i] + Rad));

            if (search_particle) {
                NumberOfResults = 0;
                for (std::size_t j = 0; j < elements.size(); ++j) {
                    if (j == static_cast<std::size_t>(p)) continue;
                    auto other = elements[j];
                    double dx = aux_coor[0] - other->coord[0];
                    double dy = aux_coor[1] - other->coord[1];
                    double dz = aux_coor[2] - other->coord[2];
                    double dist2 = dx*dx + dy*dy + dz*dz;
                    if (dist2 < Rad + other->radius) {
                        if (NumberOfResults < MaxNumberOfElements) {
                            localResults[NumberOfResults] = other;
                            localResultsDistances[NumberOfResults] = dist2;
                        }
                        ++NumberOfResults;
                    }
                }

                volatile double sink = 0.0;
                for (int w = 0; w < p_particle->workload * 20; ++w)
                    for (int k = 0; k < 20; ++k)
                        sink += std::sin(w * 0.001 + k);
                localResultsDistances[0] += sink;

                rResults[p].insert(rResults[p].begin(), localResults.begin(), localResults.begin() + std::min(NumberOfResults, MaxNumberOfElements));
            }
        }
    }

    std::size_t total = 0;
    for (const auto& v : rResults) total += v.size();
    return total;
}


// search.hpp
#pragma once
#include <array>
#include <vector>
#include <memory>
#include <cmath>

struct SphericParticle {
    std::array<double,3> coord;
    double radius;
    int workload;
};

using ParticlePtr = std::shared_ptr<SphericParticle>;
using ParticleVector = std::vector<ParticlePtr>;

// Search implementation defined in original.cpp / optimized.cpp
size_t dem_fem_search(const ParticleVector& elements);


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include "search.hpp"
#include <chrono>
#include <iostream>
#include <random>
#include <string>
#include <vector>
#include <omp.h>

ParticleVector make_particles(std::size_t n) {
    ParticleVector vec;
    vec.reserve(n);
    std::mt19937 gen(42);
    std::uniform_real_distribution<double> coord(-1.0, 1.0);
    for (std::size_t i = 0; i < n; ++i) {
        auto p = std::make_shared<SphericParticle>();
        p->coord = {coord(gen), coord(gen), coord(gen)};
        p->radius = 0.05 + 0.001 * (i % 50);
        // first quarter of the particles are much heavier to create workload imbalance
        p->workload = (i < n / 4) ? 800 : 20;
        vec.push_back(p);
    }
    return vec;
}

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    std::size_t size = 1000;
    int repeat = 10;
    int threads = std::min(4, omp_get_max_threads());

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg.rfind("--size=",0)==0) size = std::stoul(arg.substr(7));
        else if (arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
        else if (arg.rfind("--threads=",0)==0) threads = std::stoi(arg.substr(10));
    }

    omp_set_num_threads(threads);
    ParticleVector particles = make_particles(size);

    if (mode == "correct") {
        std::size_t sum = dem_fem_search(particles);
        std::cout << sum << "\n";
        return 0;
    }

    using clock = std::chrono::high_resolution_clock;
    std::size_t dummy = 0;
    auto t1 = clock::now();
    for (int r = 0; r < repeat; ++r) {
        dummy += dem_fem_search(particles);
    }
    auto t2 = clock::now();
    std::cout << "Time: " << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count() << " ms\n";
    if (dummy == 42) std::cerr << "";
    return 0;
}


// search.hpp
#pragma once
#include <array>
#include <vector>
#include <memory>
#include <cmath>

struct SphericParticle {
    std::array<double,3> coord;
    double radius;
    int workload;
};

using ParticlePtr = std::shared_ptr<SphericParticle>;
using ParticleVector = std::vector<ParticlePtr>;

// Search implementation defined in original.cpp / optimized.cpp
size_t dem_fem_search(const ParticleVector& elements);


Previous attempt info:
Original execution time: mean = 6238.00 ms, std = 4.85 ms
Diff from original code:
--- original
+++ step_1
@@ -1,12 +1,12 @@
-// original.cpp
 #include "search.hpp"
 #include <omp.h>
+#include <algorithm> // for std::min
+#include <cstring>   // for std::memset
 
-// Default static scheduling
 size_t dem_fem_search(const ParticleVector& elements) {
     const std::size_t MaxNumberOfElements = elements.size();
-    std::vector<std::vector<ParticlePtr>> rResults(elements.size());
-    std::vector<std::vector<double>> rResultsDistance(elements.size());
+    std::vector<std::vector<ParticlePtr>> rResults(MaxNumberOfElements);
+    std::vector<std::vector<double>> rResultsDistance(MaxNumberOfElements);
 
     double mGlobal_BB_LowPoint[3] = {-1.0, -1.0, -1.0};
     double mGlobal_BB_HighPoint[3] = { 1.0,  1.0,  1.0};
@@ -15,45 +15,48 @@
     {
         std::vector<ParticlePtr> localResults(MaxNumberOfElements);
         std::vector<double> localResultsDistances(MaxNumberOfElements);
-        std::size_t NumberOfResults = 0;
 
         #pragma omp for
-        for (int p = 0; p < static_cast<int>(elements.size()); ++p) {
-            auto go_it = elements[p];
-            bool search_particle = true;
+        for (std::size_t p = 0; p < MaxNumberOfElements; ++p) {
+            const auto& go_it = elements[p];
             const double* aux_coor = go_it->coord.data();
-            SphericParticle* p_particle = go_it.get();
-            double Rad = p_particle->radius;
+            double Rad = go_it->radius;
 
-            for (unsigned int i = 0; i < 3; ++i)
-                search_particle &= !(aux_coor[i] < (mGlobal_BB_LowPoint[i] - Rad)) ||
-                                   (aux_coor[i] > (mGlobal_BB_HighPoint[i] + Rad));
+            bool inBounds = true;
+            for (int i = 0; i < 3; ++i) {
+                inBounds &= !(aux_coor[i] < (mGlobal_BB_LowPoint[i] - Rad)) && !(aux_coor[i] > (mGlobal_BB_HighPoint[i] + Rad));
+            }
 
-            if (search_particle) {
-                NumberOfResults = 0;
-                for (std::size_t j = 0; j < elements.size(); ++j) {
-                    if (j == static_cast<std::size_t>(p)) continue;
-                    auto other = elements[j];
-                    double dx = aux_coor[0] - other->coord[0];
-                    double dy = aux_coor[1] - other->coord[1];
-                    double dz = aux_coor[2] - other->coord[2];
-                    double dist2 = dx*dx + dy*dy + dz*dz;
-                    if (dist2 < Rad + other->radius) {
-                        if (NumberOfResults < MaxNumberOfElements) {
-                            localResults[NumberOfResults] = other;
-                            localResultsDistances[NumberOfResults] = dist2;
+            if (inBounds) {
+                std::size_t NumberOfResults = 0;
+
+                for (std::size_t j = 0; j < MaxNumberOfElements; ++j) {
+                    if (j != p) {
+                        const auto& other = elements[j];
+                        double dx = aux_coor[0] - other->coord[0];
+                        double dy = aux_coor[1] - other->coord[1];
+                        double dz = aux_coor[2] - other->coord[2];
+                        double dist2 = dx * dx + dy * dy + dz * dz;
+                        if (dist2 < (Rad + other->radius) * (Rad + other->radius)) {
+                            if (NumberOfResults < MaxNumberOfElements) {
+                                localResults[NumberOfResults] = other;
+                                localResultsDistances[NumberOfResults] = dist2;
+                            }
+                            ++NumberOfResults;
                         }
-                        ++NumberOfResults;
                     }
                 }
 
-                volatile double sink = 0.0;
-                for (int w = 0; w < p_particle->workload * 20; ++w)
-                    for (int k = 0; k < 20; ++k)
+                double sink = 0.0;
+                for (int w = 0; w < go_it->workload * 20; ++w) {
+                    for (int k = 0; k < 20; ++k) {
                         sink += std::sin(w * 0.001 + k);
+                    }
+                }
                 localResultsDistances[0] += sink;
 
-                rResults[p].insert(rResults[p].begin(), localResults.begin(), localResults.begin() + std::min(NumberOfResults, MaxNumberOfElements));
+                rResults[p].reserve(NumberOfResults);
+                rResults[p].insert(rResults[p].end(), localResults.begin(), localResults.begin() + NumberOfResults);
             }
         }
     }
@@ -63,22 +66,5 @@
     return total;
 }
 
-
-// search.hpp
-#pragma once
-#include <array>
-#include <vector>
-#include <memory>
-#include <cmath>
-
-struct SphericParticle {
-    std::array<double,3> coord;
-    double radius;
-    int workload;
-};
-
-using ParticlePtr = std::shared_ptr<SphericParticle>;
-using ParticleVector = std::vector<ParticlePtr>;
-
-// Search implementation defined in original.cpp / optimized.cpp
+// Explicit template instantiations
 size_t dem_fem_search(const ParticleVector& elements);
Correctness check failed.
LLM analysis: The optimized code enhances performance by making the following changes: 1. Used `reserve()` on result vectors to prevent unnecessary reallocations during inserts, 2. Used `end()` instead of `begin()` for insert operations to improve efficiency and avoid excessive copying of data, 3. Simplified boolean conditions for better clarity, 4. Reduced computational overhead in the distance check by improving bounding checks and ensuring maximum reuse of calculations, and 5. Integer loop variables were changed to `std::size_t` consistently to avoid potential issues with signed vs unsigned comparisons. These optimizations are expected to improve performance while maintaining the behavior of the original code.
Diff from original code:
--- original
+++ step_2
@@ -1,12 +1,13 @@
-// original.cpp
 #include "search.hpp"
 #include <omp.h>
+#include <algorithm> // for std::min
+#include <cmath>
 
 // Default static scheduling
 size_t dem_fem_search(const ParticleVector& elements) {
     const std::size_t MaxNumberOfElements = elements.size();
-    std::vector<std::vector<ParticlePtr>> rResults(elements.size());
-    std::vector<std::vector<double>> rResultsDistance(elements.size());
+    std::vector<std::vector<ParticlePtr>> rResults(MaxNumberOfElements);
+    std::vector<std::vector<double>> rResultsDistance(MaxNumberOfElements);
 
     double mGlobal_BB_LowPoint[3] = {-1.0, -1.0, -1.0};
     double mGlobal_BB_HighPoint[3] = { 1.0,  1.0,  1.0};
@@ -15,45 +16,48 @@
     {
         std::vector<ParticlePtr> localResults(MaxNumberOfElements);
         std::vector<double> localResultsDistances(MaxNumberOfElements);
-        std::size_t NumberOfResults = 0;
+        std::size_t NumberOfResults;
 
         #pragma omp for
-        for (int p = 0; p < static_cast<int>(elements.size()); ++p) {
-            auto go_it = elements[p];
-            bool search_particle = true;
+        for (std::size_t p = 0; p < MaxNumberOfElements; ++p) {
+            const auto& go_it = elements[p];
             const double* aux_coor = go_it->coord.data();
-            SphericParticle* p_particle = go_it.get();
-            double Rad = p_particle->radius;
+            double Rad = go_it->radius;
 
-            for (unsigned int i = 0; i < 3; ++i)
-                search_particle &= !(aux_coor[i] < (mGlobal_BB_LowPoint[i] - Rad)) ||
-                                   (aux_coor[i] > (mGlobal_BB_HighPoint[i] + Rad));
+            bool inBounds = true;
+            for (int i = 0; i < 3; ++i) {
+                inBounds &= !(aux_coor[i] < (mGlobal_BB_LowPoint[i] - Rad)) && !(aux_coor[i] > (mGlobal_BB_HighPoint[i] + Rad));
+            }
 
-            if (search_particle) {
+            if (inBounds) {
                 NumberOfResults = 0;
-                for (std::size_t j = 0; j < elements.size(); ++j) {
-                    if (j == static_cast<std::size_t>(p)) continue;
-                    auto other = elements[j];
-                    double dx = aux_coor[0] - other->coord[0];
-                    double dy = aux_coor[1] - other->coord[1];
-                    double dz = aux_coor[2] - other->coord[2];
-                    double dist2 = dx*dx + dy*dy + dz*dz;
-                    if (dist2 < Rad + other->radius) {
-                        if (NumberOfResults < MaxNumberOfElements) {
-                            localResults[NumberOfResults] = other;
-                            localResultsDistances[NumberOfResults] = dist2;
+                for (std::size_t j = 0; j < MaxNumberOfElements; ++j) {
+                    if (j != p) {
+                        const auto& other = elements[j];
+                        double dx = aux_coor[0] - other->coord[0];
+                        double dy = aux_coor[1] - other->coord[1];
+                        double dz = aux_coor[2] - other->coord[2];
+                        double dist2 = dx * dx + dy * dy + dz * dz;
+                        if (dist2 < (Rad + other->radius) * (Rad + other->radius)) {
+                            if (NumberOfResults < MaxNumberOfElements) {
+                                localResults[NumberOfResults] = other;
+                                localResultsDistances[NumberOfResults] = dist2;
+                            }
+                            ++NumberOfResults;
                         }
-                        ++NumberOfResults;
                     }
                 }
 
-                volatile double sink = 0.0;
-                for (int w = 0; w < p_particle->workload * 20; ++w)
-                    for (int k = 0; k < 20; ++k)
+                double sink = 0.0;
+                for (int w = 0; w < go_it->workload * 20; ++w) {
+                    for (int k = 0; k < 20; ++k) {
                         sink += std::sin(w * 0.001 + k);
+                    }
+                }
                 localResultsDistances[0] += sink;
 
-                rResults[p].insert(rResults[p].begin(), localResults.begin(), localResults.begin() + std::min(NumberOfResults, MaxNumberOfElements));
+                rResults[p].reserve(NumberOfResults);
+                rResults[p].insert(rResults[p].end(), localResults.begin(), localResults.begin() + NumberOfResults);
             }
         }
     }
@@ -63,22 +67,5 @@
     return total;
 }
 
-
-// search.hpp
-#pragma once
-#include <array>
-#include <vector>
-#include <memory>
-#include <cmath>
-
-struct SphericParticle {
-    std::array<double,3> coord;
-    double radius;
-    int workload;
-};
-
-using ParticlePtr = std::shared_ptr<SphericParticle>;
-using ParticleVector = std::vector<ParticlePtr>;
-
-// Search implementation defined in original.cpp / optimized.cpp
+// Explicit template instantiations
 size_t dem_fem_search(const ParticleVector& elements);
Correctness check failed.
LLM analysis: The optimized code improves performance through several key enhancements: 1. Simplifies bounds checking to reduce redundant logical operations and align with SIMD optimizations. 2. Avoids unnecessary copies by reserving space in result vectors up front. 3. Eliminates the need for explicit `volatile` sinks by directly manipulating `sink`. 4. Streamlines the loop structure for clearer iteration while maintaining parallel execution with OMP. Overall, these optimizations seek to enhance computational efficiency while fully preserving the original behavior.
Diff from original code:
--- original
+++ step_3
@@ -1,12 +1,13 @@
-// original.cpp
 #include "search.hpp"
 #include <omp.h>
+#include <algorithm>
+#include <cmath>
 
 // Default static scheduling
 size_t dem_fem_search(const ParticleVector& elements) {
     const std::size_t MaxNumberOfElements = elements.size();
-    std::vector<std::vector<ParticlePtr>> rResults(elements.size());
-    std::vector<std::vector<double>> rResultsDistance(elements.size());
+    std::vector<std::vector<ParticlePtr>> rResults(MaxNumberOfElements);
+    std::vector<std::vector<double>> rResultsDistance(MaxNumberOfElements);
 
     double mGlobal_BB_LowPoint[3] = {-1.0, -1.0, -1.0};
     double mGlobal_BB_HighPoint[3] = { 1.0,  1.0,  1.0};
@@ -15,45 +16,48 @@
     {
         std::vector<ParticlePtr> localResults(MaxNumberOfElements);
         std::vector<double> localResultsDistances(MaxNumberOfElements);
-        std::size_t NumberOfResults = 0;
 
         #pragma omp for
-        for (int p = 0; p < static_cast<int>(elements.size()); ++p) {
-            auto go_it = elements[p];
-            bool search_particle = true;
+        for (std::size_t p = 0; p < MaxNumberOfElements; ++p) {
+            const auto& go_it = elements[p];
             const double* aux_coor = go_it->coord.data();
-            SphericParticle* p_particle = go_it.get();
-            double Rad = p_particle->radius;
+            double Rad = go_it->radius;
 
-            for (unsigned int i = 0; i < 3; ++i)
-                search_particle &= !(aux_coor[i] < (mGlobal_BB_LowPoint[i] - Rad)) ||
-                                   (aux_coor[i] > (mGlobal_BB_HighPoint[i] + Rad));
+            bool inBounds = true;
+            for (int i = 0; i < 3; ++i) {
+                inBounds &= !(aux_coor[i] < (mGlobal_BB_LowPoint[i] - Rad) || aux_coor[i] > (mGlobal_BB_HighPoint[i] + Rad));
+            }
 
-            if (search_particle) {
-                NumberOfResults = 0;
-                for (std::size_t j = 0; j < elements.size(); ++j) {
-                    if (j == static_cast<std::size_t>(p)) continue;
-                    auto other = elements[j];
-                    double dx = aux_coor[0] - other->coord[0];
-                    double dy = aux_coor[1] - other->coord[1];
-                    double dz = aux_coor[2] - other->coord[2];
-                    double dist2 = dx*dx + dy*dy + dz*dz;
-                    if (dist2 < Rad + other->radius) {
-                        if (NumberOfResults < MaxNumberOfElements) {
-                            localResults[NumberOfResults] = other;
-                            localResultsDistances[NumberOfResults] = dist2;
+            if (inBounds) {
+                std::size_t NumberOfResults = 0;
+
+                for (std::size_t j = 0; j < MaxNumberOfElements; ++j) {
+                    if (j != p) {
+                        const auto& other = elements[j];
+                        double dx = aux_coor[0] - other->coord[0];
+                        double dy = aux_coor[1] - other->coord[1];
+                        double dz = aux_coor[2] - other->coord[2];
+                        double dist2 = dx * dx + dy * dy + dz * dz;
+                        if (dist2 < (Rad + other->radius) * (Rad + other->radius)) {
+                            if (NumberOfResults < MaxNumberOfElements) {
+                                localResults[NumberOfResults] = other;
+                                localResultsDistances[NumberOfResults] = dist2;
+                            }
+                            ++NumberOfResults;
                         }
-                        ++NumberOfResults;
                     }
                 }
 
-                volatile double sink = 0.0;
-                for (int w = 0; w < p_particle->workload * 20; ++w)
-                    for (int k = 0; k < 20; ++k)
+                double sink = 0.0;
+                for (int w = 0; w < go_it->workload * 20; ++w) {
+                    for (int k = 0; k < 20; ++k) {
                         sink += std::sin(w * 0.001 + k);
+                    }
+                }
                 localResultsDistances[0] += sink;
 
-                rResults[p].insert(rResults[p].begin(), localResults.begin(), localResults.begin() + std::min(NumberOfResults, MaxNumberOfElements));
+                rResults[p].reserve(NumberOfResults);
+                rResults[p].insert(rResults[p].end(), localResults.begin(), localResults.begin() + NumberOfResults);
             }
         }
     }
@@ -63,22 +67,5 @@
     return total;
 }
 
-
-// search.hpp
-#pragma once
-#include <array>
-#include <vector>
-#include <memory>
-#include <cmath>
-
-struct SphericParticle {
-    std::array<double,3> coord;
-    double radius;
-    int workload;
-};
-
-using ParticlePtr = std::shared_ptr<SphericParticle>;
-using ParticleVector = std::vector<ParticlePtr>;
-
-// Search implementation defined in original.cpp / optimized.cpp
+// Explicit template instantiations
 size_t dem_fem_search(const ParticleVector& elements);
Correctness check failed.
LLM analysis: The optimized code enhances performance by simplifying the bounds checking and improving data locality. It reserves space in the result vectors up front to minimize dynamic memory allocation costs. Additionally, the innermost loops are kept clean and efficient, reducing overhead while preserving the original functionality. This approach should yield better performance under multi-threading.