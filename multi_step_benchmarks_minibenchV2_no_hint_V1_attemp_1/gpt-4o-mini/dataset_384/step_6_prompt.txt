You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include <cctype>
#include <cstddef>
extern "C" int bstr_util_mem_index_of_mem_nocasenorzero(const void *data1,size_t len1,const void *data2,size_t len2){
    const unsigned char* d1=(const unsigned char*)data1;
    const unsigned char* d2=(const unsigned char*)data2;
    size_t i,j;
    for(i=0;i<len1;i++){
        size_t k=i;
        for(j=0;(j<len2)&&(k<len1);j++,k++){
            if(d1[k]==0){
                j--;
                continue;
            }
            if(toupper(d1[k])!=toupper(d2[j])) break;
        }
        if(j==len2) return i;
    }
    return -1;
}


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include <vector>
#include <string>
#include <chrono>
#include <iostream>

extern "C" int bstr_util_mem_index_of_mem_nocasenorzero(const void*,size_t,const void*,size_t);

std::vector<unsigned char> make_data(size_t len, size_t leading_zeros){
    std::vector<unsigned char> v(len,'A');
    for(size_t i=0;i<leading_zeros && i<len;i++) v[i]=0;
    if(len>=3){
        v[len-3]='x';
        v[len-2]='y';
        v[len-1]='z';
    }
    return v;
}

int main(int argc,char**argv){
    std::string mode="perf";
    int repeat=320;
    size_t len=20000;
    size_t leading=10000;
    for(int i=1;i<argc;i++){
        std::string arg=argv[i];
        if(arg=="--mode=correct") mode="correct";
        else if(arg=="--mode=perf") mode="perf";
        else if(arg.rfind("--repeat=",0)==0) repeat=std::stoi(arg.substr(9));
        else if(arg.rfind("--len=",0)==0) len=std::stoul(arg.substr(6));
        else if(arg.rfind("--zeros=",0)==0) leading=std::stoul(arg.substr(8));
    }
    auto base=make_data(len,leading);
    const char pattern[3]={'x','y','z'};
    int pos=0;
    if(mode=="correct"){
        pos=bstr_util_mem_index_of_mem_nocasenorzero(base.data(),base.size(),pattern,3);
        std::cout<<pos<<"\n";
    } else {
        using clock=std::chrono::high_resolution_clock;
        auto t1=clock::now();
        for(int r=0;r<repeat;r++){
            pos+=bstr_util_mem_index_of_mem_nocasenorzero(base.data(),base.size(),pattern,3);
        }
        auto t2=clock::now();
        std::cout<<"Time: "<<std::chrono::duration_cast<std::chrono::milliseconds>(t2-t1).count()<<" ms\n";
    }
    if(pos==123456789) std::cerr<<"";
    return 0;
}


Previous attempt info:
Original execution time: mean = 5343.00 ms, std = 2.00 ms
Diff from original code:
--- original
+++ step_1
@@ -1,20 +1,24 @@
-// original.cpp
 #include <cctype>
 #include <cstddef>
 extern "C" int bstr_util_mem_index_of_mem_nocasenorzero(const void *data1,size_t len1,const void *data2,size_t len2){
-    const unsigned char* d1=(const unsigned char*)data1;
-    const unsigned char* d2=(const unsigned char*)data2;
-    size_t i,j;
-    for(i=0;i<len1;i++){
-        size_t k=i;
-        for(j=0;(j<len2)&&(k<len1);j++,k++){
-            if(d1[k]==0){
+    const unsigned char* d1 = static_cast<const unsigned char*>(data1);
+    const unsigned char* d2 = static_cast<const unsigned char*>(data2);
+    size_t i, j;
+
+    // Use pointers for data access to reduce array indexing overhead
+    const unsigned char* d1_end = d1 + len1;
+    const unsigned char* d2_end = d2 + len2;
+
+    for(i = 0; d1 + i < d1_end; i++) {
+        const unsigned char* k = d1 + i;
+        for(j = 0; j < len2 && k < d1_end; j++, k++) {
+            if(*k == 0) {
                 j--;
                 continue;
             }
-            if(toupper(d1[k])!=toupper(d2[j])) break;
+            if(toupper(*k) != toupper(d2[j])) break;
         }
-        if(j==len2) return i;
+        if(j == len2) return static_cast<int>(i);
     }
     return -1;
 }
Compilation succeeded. Execution time: mean = 5344.20 ms, std = 0.84 ms. Original execution time: mean = 5343.00 ms, std = 2.00 ms
LLM analysis: The optimization focuses on reducing pointer arithmetic and array indexing overhead by caching the end pointers of the input arrays, thus minimizing comparisons in the loop. Using pointers to access elements can often be faster than indexing, especially in tight loops. The `static_cast` is used instead of C-style casting for clarity and type safety.
Diff from original code:
--- original
+++ step_2
@@ -1,20 +1,25 @@
-// original.cpp
 #include <cctype>
 #include <cstddef>
+#include <cstring>
 extern "C" int bstr_util_mem_index_of_mem_nocasenorzero(const void *data1,size_t len1,const void *data2,size_t len2){
-    const unsigned char* d1=(const unsigned char*)data1;
-    const unsigned char* d2=(const unsigned char*)data2;
-    size_t i,j;
-    for(i=0;i<len1;i++){
-        size_t k=i;
-        for(j=0;(j<len2)&&(k<len1);j++,k++){
-            if(d1[k]==0){
+    const unsigned char* d1 = static_cast<const unsigned char*>(data1);
+    const unsigned char* d2 = static_cast<const unsigned char*>(data2);
+    const unsigned char* d1_end = d1 + len1;
+    const unsigned char* d2_end = d2 + len2;
+
+    size_t i, j;
+    for(i = 0; d1 + i < d1_end; i++) {
+        const unsigned char* k = d1 + i;
+        for(j = 0; j < len2 && k < d1_end; j++, k++) {
+            if(*k == 0) {
                 j--;
                 continue;
             }
-            if(toupper(d1[k])!=toupper(d2[j])) break;
+            if(toupper(*k) != toupper(d2[j])) break;
         }
-        if(j==len2) return i;
+        if(j == len2) return static_cast<int>(i);
     }
     return -1;
 }
+
+// Explicit template instantiations if present
Compilation succeeded. Execution time: mean = 5344.60 ms, std = 1.34 ms. Original execution time: mean = 5343.00 ms, std = 2.00 ms
LLM analysis: The optimization includes modifying loop structures and utilizing pointers instead of indexing to reduce computational overhead. By precomputing the end pointers of the source arrays, we reduce the number of comparisons within the loops. I've also included `#include <cstring>` to allow for possible future string manipulation, enhancing future-proofing without changing current behavior. The existing execution time is tweaked minimally to improve performance.
Diff from original code:
--- original
+++ step_3
@@ -1,20 +1,32 @@
-// original.cpp
 #include <cctype>
 #include <cstddef>
+#include <cstring>
 extern "C" int bstr_util_mem_index_of_mem_nocasenorzero(const void *data1,size_t len1,const void *data2,size_t len2){
-    const unsigned char* d1=(const unsigned char*)data1;
-    const unsigned char* d2=(const unsigned char*)data2;
-    size_t i,j;
-    for(i=0;i<len1;i++){
-        size_t k=i;
-        for(j=0;(j<len2)&&(k<len1);j++,k++){
-            if(d1[k]==0){
+    const unsigned char* d1 = static_cast<const unsigned char*>(data1);
+    const unsigned char* d2 = static_cast<const unsigned char*>(data2);
+    const unsigned char* d1_end = d1 + len1;
+    const unsigned char* d2_end = d2 + len2;
+
+    size_t i = 0;
+    while (i < len1) {
+        const unsigned char* k = d1 + i;
+        size_t j = 0;
+
+        while (j < len2 && k < d1_end) {
+            if (*k == 0) {
                 j--;
+                k++;
                 continue;
             }
-            if(toupper(d1[k])!=toupper(d2[j])) break;
+            if (toupper(*k) != toupper(d2[j])) break;
+            k++;
+            j++;
         }
-        if(j==len2) return i;
+
+        if (j == len2) return static_cast<int>(i);
+        i++;
     }
     return -1;
 }
+
+// Explicit template instantiations if present
Compilation succeeded. Execution time: mean = 19.60 ms, std = 0.89 ms. Original execution time: mean = 5343.00 ms, std = 2.00 ms
LLM analysis: Optimizations include switching from for-loops to while-loops for clarity and potentially optimizing performance by reducing unnecessary increments. The inner loop iterates through characters and moves the pointer only when checks have been satisfied. This approach can improve readability while maintaining performance. Additionally, the explicit inclusions of necessary headers and the careful tracking of pointer increments through the loops are preserved for efficiency.
Diff from original code:
--- original
+++ step_4
@@ -1,20 +1,33 @@
-// original.cpp
 #include <cctype>
 #include <cstddef>
-extern "C" int bstr_util_mem_index_of_mem_nocasenorzero(const void *data1,size_t len1,const void *data2,size_t len2){
-    const unsigned char* d1=(const unsigned char*)data1;
-    const unsigned char* d2=(const unsigned char*)data2;
-    size_t i,j;
-    for(i=0;i<len1;i++){
-        size_t k=i;
-        for(j=0;(j<len2)&&(k<len1);j++,k++){
-            if(d1[k]==0){
+#include <cstring>
+
+extern "C" int bstr_util_mem_index_of_mem_nocasenorzero(const void *data1, size_t len1, const void *data2, size_t len2) {
+    const unsigned char* d1 = static_cast<const unsigned char*>(data1);
+    const unsigned char* d2 = static_cast<const unsigned char*>(data2);
+    const unsigned char* d1_end = d1 + len1;
+    const unsigned char* d2_end = d2 + len2;
+
+    size_t i = 0;
+    while (i < len1) {
+        const unsigned char* k = d1 + i;
+        size_t j = 0;
+
+        while (j < len2 && k < d1_end) {
+            if (*k == 0) {
                 j--;
+                k++;
                 continue;
             }
-            if(toupper(d1[k])!=toupper(d2[j])) break;
+            if (toupper(*k) != toupper(d2[j])) break;
+            k++;
+            j++;
         }
-        if(j==len2) return i;
+
+        if (j == len2) return static_cast<int>(i);
+        i++;
     }
     return -1;
 }
+
+// Explicit template instantiations if present
Compilation succeeded. Execution time: mean = 19.40 ms, std = 0.55 ms. Original execution time: mean = 5343.00 ms, std = 2.00 ms
LLM analysis: The primary optimization involves replacing the for-loops with while-loops, which can lead to clearer control flow and potential performance improvements due to reduced increments. The inner loop was also modified to minimize unnecessary pointer movements, particularly when handling the null character case. These changes were made to improve the execution time while preserving the original function behavior and logic.
Diff from original code:
--- original
+++ step_5
@@ -1,20 +1,32 @@
-// original.cpp
 #include <cctype>
 #include <cstddef>
-extern "C" int bstr_util_mem_index_of_mem_nocasenorzero(const void *data1,size_t len1,const void *data2,size_t len2){
-    const unsigned char* d1=(const unsigned char*)data1;
-    const unsigned char* d2=(const unsigned char*)data2;
-    size_t i,j;
-    for(i=0;i<len1;i++){
-        size_t k=i;
-        for(j=0;(j<len2)&&(k<len1);j++,k++){
-            if(d1[k]==0){
+
+extern "C" int bstr_util_mem_index_of_mem_nocasenorzero(const void *data1, size_t len1, const void *data2, size_t len2) {
+    const unsigned char* d1 = static_cast<const unsigned char*>(data1);
+    const unsigned char* d2 = static_cast<const unsigned char*>(data2);
+    const unsigned char* d1_end = d1 + len1;
+    const unsigned char* d2_end = d2 + len2;
+
+    size_t i = 0;
+    while (i < len1) {
+        const unsigned char* k = d1 + i;
+        size_t j = 0;
+
+        while (j < len2 && k < d1_end) {
+            if (*k == 0) {
                 j--;
+                k++;
                 continue;
             }
-            if(toupper(d1[k])!=toupper(d2[j])) break;
+            if (toupper(*k) != toupper(d2[j])) break;
+            k++;
+            j++;
         }
-        if(j==len2) return i;
+
+        if (j == len2) return static_cast<int>(i);
+        i++;
     }
     return -1;
 }
+
+// Explicit template instantiations if present
Compilation succeeded. Execution time: mean = 19.60 ms, std = 0.55 ms. Original execution time: mean = 5343.00 ms, std = 2.00 ms
LLM analysis: The code was optimized by converting nested for-loops into while-loops, which can enhance performance due to clearer control flow and reduced increment operations. Pointer handling was refined to decrease potential inefficiencies from unexpected pointer movements, especially when encountering null characters. Overall, these changes should significantly improve execution time while maintaining the original behavior of the function.