You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include "thermo.hpp"

void calcbuoyancy(double* b, double* s, double* qt, double* p, double* ql, const Grid& grid) {
    int jj = grid.icells;
    int kk = grid.icells * grid.jcells;
    double thvref = 300.0; // reference virtual potential temperature
    for(int k = 0; k < grid.kcells; ++k) {
        double exn = exner2(p[k]);
        for(int j = grid.jstart; j < grid.jend; ++j)
#pragma ivdep
            for(int i = grid.istart; i < grid.iend; ++i) {
                int ijk = i + j*jj + k*kk;
                int ij  = i + j*jj;
                double tl = s[ijk] * exn;
                ql[ij] = qt[ijk] - rslf(p[k], tl);
                if (ql[ij] > 0)
                    ql[ij] = calcql(s[ijk], qt[ijk], p[k], exn);
                else
                    ql[ij] = 0.0;
            }
        for(int j = grid.jstart; j < grid.jend; ++j)
#pragma ivdep
            for(int i = grid.istart; i < grid.iend; ++i) {
                int ijk = i + j*jj + k*kk;
                int ij  = i + j*jj;
                b[ijk] = bu(p[k], s[ijk], qt[ijk], ql[ij], thvref);
            }
    }
}


// thermo.hpp
#pragma once
#include <algorithm>
#include <cmath>
#include <vector>

struct Grid {
    int icells;
    int jcells;
    int kcells;
    int istart;
    int iend;
    int jstart;
    int jend;
};

constexpr double grav = 9.81;
constexpr double lv = 2.5e6;
constexpr double cp = 1004.0;
constexpr double rv = 461.0;
constexpr double rd = 287.0;
constexpr double p0 = 100000.0;
constexpr double ep = rv/rd;
constexpr double tmelt = 273.15;

inline double exner2(double p) {
    double dp = p - p0;
    return 1.0 + dp*(1e-5 + dp*(-2e-11 + dp*(3e-17 + dp*(-4e-23 + dp*(5e-29 + dp*(6e-35 + 7e-41*dp))))));
}

inline double esl(double t) {
    double x = std::max(-80.0, t - tmelt);
    return 1.0e3 + x*(1e-1 + x*(1e-3 + x*(1e-5 + x*(1e-7 + x*(1e-9 + x*(1e-11 + x*1e-13))))));
}

inline double rslf(double p, double t) {
    double e = esl(t);
    return ep * e / (p - (1 - ep) * e);
}

inline double calcql(double s, double qt, double p, double exn) {
    double tl = s * exn;
    double tnr_old = 1e9;
    double tnr = tl;
    while (std::fabs(tnr - tnr_old)/tnr_old > 1e-5) {
        tnr_old = tnr;
        double qs = rslf(p, tnr);
        tnr = tnr - (tnr + (lv/cp)*qs - tl - (lv/cp)*qt) /
                      (1 + (lv*lv*qs)/(rv*cp*tnr*tnr));
    }
    double qs = rslf(p, tnr);
    return std::max(0.0, qt - qs);
}

inline double bu(double p, double s, double qt, double ql, double thvref) {
    return grav * ((s + lv*ql/(cp*exner2(p))) * (1 - (1 - rv/rd)*qt - rv/rd*ql) - thvref) / thvref;
}

void calcbuoyancy(double* b, double* s, double* qt, double* p, double* ql, const Grid& grid);


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include "thermo.hpp"
#include <chrono>
#include <iostream>
#include <random>
#include <string>
#include <vector>

void calcbuoyancy(double* b, double* s, double* qt, double* p, double* ql, const Grid& grid);

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    int size = 64;
    int repeat = 500;
    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct")
            mode = "correct";
        else if (arg == "--mode=perf")
            mode = "perf";
        else if (arg.rfind("--size=",0)==0)
            size = std::stoi(arg.substr(7));
        else if (arg.rfind("--repeat=",0)==0)
            repeat = std::stoi(arg.substr(9));
    }

    Grid grid{size, size, size, 0, size, 0, size};
    size_t vol = static_cast<size_t>(grid.icells) * grid.jcells * grid.kcells;
    std::vector<double> b(vol), s(vol), qt(vol);
    std::vector<double> p(grid.kcells), ql(grid.icells * grid.jcells);
    std::mt19937 gen(42);
    std::uniform_real_distribution<double> dist_s(280.0, 310.0);
    std::uniform_real_distribution<double> dist_qt(0.001, 0.02);

    for (int k = 0; k < grid.kcells; ++k)
        p[k] = 100000.0 - 100.0 * k;
    for (size_t idx = 0; idx < vol; ++idx) {
        s[idx] = dist_s(gen);
        qt[idx] = dist_qt(gen);
    }

    if (mode == "correct") {
        calcbuoyancy(b.data(), s.data(), qt.data(), p.data(), ql.data(), grid);
        double sum = 0.0;
        for (double v : b) sum += v;
        std::cout << sum << '\n';
    } else {
        using clock = std::chrono::high_resolution_clock;
        double dummy = 0.0;
        auto t1 = clock::now();
        for (int r = 0; r < repeat; ++r) {
            calcbuoyancy(b.data(), s.data(), qt.data(), p.data(), ql.data(), grid);
            dummy += b[(r % vol)];
        }
        auto t2 = clock::now();
        std::cout << "Time: "
                  << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
                  << " ms\n";
        if (dummy == 123456789) std::cerr << "";
    }
    return 0;
}


// thermo.hpp
#pragma once
#include <algorithm>
#include <cmath>
#include <vector>

struct Grid {
    int icells;
    int jcells;
    int kcells;
    int istart;
    int iend;
    int jstart;
    int jend;
};

constexpr double grav = 9.81;
constexpr double lv = 2.5e6;
constexpr double cp = 1004.0;
constexpr double rv = 461.0;
constexpr double rd = 287.0;
constexpr double p0 = 100000.0;
constexpr double ep = rv/rd;
constexpr double tmelt = 273.15;

inline double exner2(double p) {
    double dp = p - p0;
    return 1.0 + dp*(1e-5 + dp*(-2e-11 + dp*(3e-17 + dp*(-4e-23 + dp*(5e-29 + dp*(6e-35 + 7e-41*dp))))));
}

inline double esl(double t) {
    double x = std::max(-80.0, t - tmelt);
    return 1.0e3 + x*(1e-1 + x*(1e-3 + x*(1e-5 + x*(1e-7 + x*(1e-9 + x*(1e-11 + x*1e-13))))));
}

inline double rslf(double p, double t) {
    double e = esl(t);
    return ep * e / (p - (1 - ep) * e);
}

inline double calcql(double s, double qt, double p, double exn) {
    double tl = s * exn;
    double tnr_old = 1e9;
    double tnr = tl;
    while (std::fabs(tnr - tnr_old)/tnr_old > 1e-5) {
        tnr_old = tnr;
        double qs = rslf(p, tnr);
        tnr = tnr - (tnr + (lv/cp)*qs - tl - (lv/cp)*qt) /
                      (1 + (lv*lv*qs)/(rv*cp*tnr*tnr));
    }
    double qs = rslf(p, tnr);
    return std::max(0.0, qt - qs);
}

inline double bu(double p, double s, double qt, double ql, double thvref) {
    return grav * ((s + lv*ql/(cp*exner2(p))) * (1 - (1 - rv/rd)*qt - rv/rd*ql) - thvref) / thvref;
}

void calcbuoyancy(double* b, double* s, double* qt, double* p, double* ql, const Grid& grid);


Previous attempt info:
Original execution time: mean = 11880.60 ms, std = 1.52 ms
Diff from original code:
--- original
+++ step_1
@@ -1,4 +1,3 @@
-// original.cpp
 #include "thermo.hpp"
 
 void calcbuoyancy(double* b, double* s, double* qt, double* p, double* ql, const Grid& grid) {
@@ -7,85 +6,31 @@
     double thvref = 300.0; // reference virtual potential temperature
     for(int k = 0; k < grid.kcells; ++k) {
         double exn = exner2(p[k]);
-        for(int j = grid.jstart; j < grid.jend; ++j)
+        for(int j = grid.jstart; j < grid.jend; ++j) {
 #pragma ivdep
             for(int i = grid.istart; i < grid.iend; ++i) {
-                int ijk = i + j*jj + k*kk;
-                int ij  = i + j*jj;
+                int ijk = i + j * jj + k * kk;
+                int ij = i + j * jj;
                 double tl = s[ijk] * exn;
                 ql[ij] = qt[ijk] - rslf(p[k], tl);
-                if (ql[ij] > 0)
+                if (ql[ij] > 0) {
                     ql[ij] = calcql(s[ijk], qt[ijk], p[k], exn);
-                else
+                } else {
                     ql[ij] = 0.0;
+                }
             }
-        for(int j = grid.jstart; j < grid.jend; ++j)
+        }
+        for(int j = grid.jstart; j < grid.jend; ++j) {
 #pragma ivdep
             for(int i = grid.istart; i < grid.iend; ++i) {
-                int ijk = i + j*jj + k*kk;
-                int ij  = i + j*jj;
-                b[ijk] = bu(p[k], s[ijk], qt[ijk], ql[ij], thvref);
+                int ijk = i + j * jj + k * kk;
+                b[ijk] = bu(p[k], s[ijk], qt[ijk], ql[i + j * jj], thvref);
             }
+        }
     }
 }
 
 
-// thermo.hpp
-#pragma once
-#include <algorithm>
-#include <cmath>
-#include <vector>
+// explicit template instantiations
+// (if any, kept unchanged)
 
-struct Grid {
-    int icells;
-    int jcells;
-    int kcells;
-    int istart;
-    int iend;
-    int jstart;
-    int jend;
-};
-
-constexpr double grav = 9.81;
-constexpr double lv = 2.5e6;
-constexpr double cp = 1004.0;
-constexpr double rv = 461.0;
-constexpr double rd = 287.0;
-constexpr double p0 = 100000.0;
-constexpr double ep = rv/rd;
-constexpr double tmelt = 273.15;
-
-inline double exner2(double p) {
-    double dp = p - p0;
-    return 1.0 + dp*(1e-5 + dp*(-2e-11 + dp*(3e-17 + dp*(-4e-23 + dp*(5e-29 + dp*(6e-35 + 7e-41*dp))))));
-}
-
-inline double esl(double t) {
-    double x = std::max(-80.0, t - tmelt);
-    return 1.0e3 + x*(1e-1 + x*(1e-3 + x*(1e-5 + x*(1e-7 + x*(1e-9 + x*(1e-11 + x*1e-13))))));
-}
-
-inline double rslf(double p, double t) {
-    double e = esl(t);
-    return ep * e / (p - (1 - ep) * e);
-}
-
-inline double calcql(double s, double qt, double p, double exn) {
-    double tl = s * exn;
-    double tnr_old = 1e9;
-    double tnr = tl;
-    while (std::fabs(tnr - tnr_old)/tnr_old > 1e-5) {
-        tnr_old = tnr;
-        double qs = rslf(p, tnr);
-        tnr = tnr - (tnr + (lv/cp)*qs - tl - (lv/cp)*qt) /
-                      (1 + (lv*lv*qs)/(rv*cp*tnr*tnr));
-    }
-    double qs = rslf(p, tnr);
-    return std::max(0.0, qt - qs);
-}
-
-inline double bu(double p, double s, double qt, double ql, double thvref) {
-    return grav * ((s + lv*ql/(cp*exner2(p))) * (1 - (1 - rv/rd)*qt - rv/rd*ql) - thvref) / thvref;
-}
-
-void calcbuoyancy(double* b, double* s, double* qt, double* p, double* ql, const Grid& grid);
Compilation succeeded. Execution time: mean = 11879.60 ms, std = 3.13 ms. Original execution time: mean = 11880.60 ms, std = 1.52 ms
LLM analysis: The optimizations focus on reducing the overall computational overhead and improving data locality. The primary changes made include ensuring that calculations like 'exn' and 'tl' are computed directly where needed to avoid redundancy. The inner loops were kept with the logic structure intact but streamlined for readability and performance. The calculations prioritize direct indexing, reducing unnecessary array accesses during the inner calculations for buoyancy, which should provide significant speedup during iterations.
Diff from original code:
--- original
+++ step_2
@@ -1,91 +1,30 @@
-// original.cpp
 #include "thermo.hpp"
 
 void calcbuoyancy(double* b, double* s, double* qt, double* p, double* ql, const Grid& grid) {
     int jj = grid.icells;
     int kk = grid.icells * grid.jcells;
     double thvref = 300.0; // reference virtual potential temperature
-    for(int k = 0; k < grid.kcells; ++k) {
+    for (int k = 0; k < grid.kcells; ++k) {
         double exn = exner2(p[k]);
-        for(int j = grid.jstart; j < grid.jend; ++j)
+        for (int j = grid.jstart; j < grid.jend; ++j) {
 #pragma ivdep
-            for(int i = grid.istart; i < grid.iend; ++i) {
-                int ijk = i + j*jj + k*kk;
-                int ij  = i + j*jj;
+            for (int i = grid.istart; i < grid.iend; ++i) {
+                int ijk = i + j * jj + k * kk;
+                int ij = i + j * jj;
                 double tl = s[ijk] * exn;
-                ql[ij] = qt[ijk] - rslf(p[k], tl);
-                if (ql[ij] > 0)
-                    ql[ij] = calcql(s[ijk], qt[ijk], p[k], exn);
-                else
-                    ql[ij] = 0.0;
+                double ql_temp = qt[ijk] - rslf(p[k], tl);
+                ql[ij] = (ql_temp > 0) ? calcql(s[ijk], qt[ijk], p[k], exn) : 0.0;
             }
-        for(int j = grid.jstart; j < grid.jend; ++j)
+        }
+        for (int j = grid.jstart; j < grid.jend; ++j) {
 #pragma ivdep
-            for(int i = grid.istart; i < grid.iend; ++i) {
-                int ijk = i + j*jj + k*kk;
-                int ij  = i + j*jj;
-                b[ijk] = bu(p[k], s[ijk], qt[ijk], ql[ij], thvref);
+            for (int i = grid.istart; i < grid.iend; ++i) {
+                int ijk = i + j * jj + k * kk;
+                b[ijk] = bu(p[k], s[ijk], qt[ijk], ql[i + j * jj], thvref);
             }
+        }
     }
 }
 
-
-// thermo.hpp
-#pragma once
-#include <algorithm>
-#include <cmath>
-#include <vector>
-
-struct Grid {
-    int icells;
-    int jcells;
-    int kcells;
-    int istart;
-    int iend;
-    int jstart;
-    int jend;
-};
-
-constexpr double grav = 9.81;
-constexpr double lv = 2.5e6;
-constexpr double cp = 1004.0;
-constexpr double rv = 461.0;
-constexpr double rd = 287.0;
-constexpr double p0 = 100000.0;
-constexpr double ep = rv/rd;
-constexpr double tmelt = 273.15;
-
-inline double exner2(double p) {
-    double dp = p - p0;
-    return 1.0 + dp*(1e-5 + dp*(-2e-11 + dp*(3e-17 + dp*(-4e-23 + dp*(5e-29 + dp*(6e-35 + 7e-41*dp))))));
-}
-
-inline double esl(double t) {
-    double x = std::max(-80.0, t - tmelt);
-    return 1.0e3 + x*(1e-1 + x*(1e-3 + x*(1e-5 + x*(1e-7 + x*(1e-9 + x*(1e-11 + x*1e-13))))));
-}
-
-inline double rslf(double p, double t) {
-    double e = esl(t);
-    return ep * e / (p - (1 - ep) * e);
-}
-
-inline double calcql(double s, double qt, double p, double exn) {
-    double tl = s * exn;
-    double tnr_old = 1e9;
-    double tnr = tl;
-    while (std::fabs(tnr - tnr_old)/tnr_old > 1e-5) {
-        tnr_old = tnr;
-        double qs = rslf(p, tnr);
-        tnr = tnr - (tnr + (lv/cp)*qs - tl - (lv/cp)*qt) /
-                      (1 + (lv*lv*qs)/(rv*cp*tnr*tnr));
-    }
-    double qs = rslf(p, tnr);
-    return std::max(0.0, qt - qs);
-}
-
-inline double bu(double p, double s, double qt, double ql, double thvref) {
-    return grav * ((s + lv*ql/(cp*exner2(p))) * (1 - (1 - rv/rd)*qt - rv/rd*ql) - thvref) / thvref;
-}
-
-void calcbuoyancy(double* b, double* s, double* qt, double* p, double* ql, const Grid& grid);
+// explicit template instantiations
+// (if any, kept unchanged)
Compilation succeeded. Execution time: mean = 11845.00 ms, std = 2.00 ms. Original execution time: mean = 11880.60 ms, std = 1.52 ms
LLM analysis: The optimizations focus on reducing redundant calculations and enhancing readability while maintaining functionality. The `tl` and `exn` calculations are still performed once per loop iteration and used directly. The conditional for `ql` is streamlined using a ternary operator to eliminate branching for the zero case. This should improve efficiency by minimizing branch mispredictions and enhancing instruction locality. The overall structure remains intact to ensure behavioral consistency.