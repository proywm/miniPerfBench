You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include <string>
#include <cctype>
#include <cstring>

// Minimal string implementation which reallocates on every append
class SimpleString {
    char* data = nullptr;
    size_t len = 0;
    size_t cap = 0;
public:
    SimpleString() = default;
    explicit SimpleString(const std::string& s) { *this = s; }
    SimpleString(const SimpleString& other) { *this = other; }
    SimpleString(SimpleString&& other) noexcept { data = other.data; len = other.len; cap = other.cap; other.data = nullptr; other.len = other.cap = 0; }
    ~SimpleString() { delete[] data; }
    SimpleString& operator=(const SimpleString& other) {
        if (this != &other) { resize(other.len); std::memcpy(data, other.data, len); }
        return *this;
    }
    SimpleString& operator=(const std::string& s) { resize(s.size()); std::memcpy(data, s.data(), len); return *this; }
    void resize(size_t n) {
        if (cap < n) {
            char* newd = new char[n];
            if (data) std::memcpy(newd, data, len);
            delete[] data;
            data = newd;
            cap = n;
        }
        len = n;
    }
    size_t size() const { return len; }
    SimpleString substr(size_t pos, size_t n) const { return SimpleString(std::string(data + pos, n)); }
    SimpleString substr(size_t pos) const { return SimpleString(std::string(data + pos, len - pos)); }
    void append(const SimpleString& s) {
        size_t old = len;
        resize(len + s.len);
        std::memcpy(data + old, s.data, s.len);
    }
    void append(const std::string& s) {
        size_t old = len;
        resize(len + s.size());
        std::memcpy(data + old, s.data(), s.size());
    }
    std::string str() const { return std::string(data, len); }
};

static bool iequals(const std::string &a, const std::string &b) {
    if (a.size() != b.size()) return false;
    for (size_t i = 0; i < a.size(); ++i) {
        if (std::tolower(static_cast<unsigned char>(a[i])) !=
            std::tolower(static_cast<unsigned char>(b[i])))
            return false;
    }
    return true;
}

void search_replace(std::string &text, const std::string &find, const std::string &replace) {
    SimpleString Left, Right(text);
    bool replaced = false;
    int pos = 0;
    while (pos <= static_cast<int>(Right.size() - find.size())) {
        if (iequals(Right.substr(pos, find.size()).str(), find)) {
            Left.append(Right.substr(0, pos));
            Left.append(replace);
            Right = Right.substr(pos + find.size());
            replaced = true;
            pos = 0;
        }
        else {
            ++pos;
        }
    }
    if (replaced) {
        text = Left.str(); // leftover dropped
    }
}

// explicit instantiation for benchmark usage
void search_replace(std::string&, const std::string&, const std::string&);


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include <chrono>
#include <iostream>
#include <random>
#include <string>

void search_replace(std::string& text, const std::string& find, const std::string& replace);

static std::string generate_text(size_t groups) {
    std::mt19937 gen(42);
    std::uniform_int_distribution<int> dist('a', 'z');
    std::string text;
    text.reserve(groups * 24); // include filler characters
    for (size_t i = 0; i < groups; ++i) {
        text += "abc";
        if (i + 1 < groups) {
            for (int j = 0; j < 20; ++j) text.push_back(static_cast<char>(dist(gen)));
        }
    }
    return text;
}

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    size_t size = 5000;
    int repeat = 100;

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg.rfind("--size=",0)==0) size = std::stoul(arg.substr(7));
        else if (arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
    }

    std::string base = generate_text(size);
    const std::string pattern = "abc";
    const std::string repl = "XYZ";

    if (mode == "correct") {
        std::string text = base;
        search_replace(text, pattern, repl);
        long long sum = 0;
        for (char c : text) sum += c;
        std::cout << sum << "\n";
    } else {
        using clock = std::chrono::high_resolution_clock;
        long long dummy = 0;
        auto t1 = clock::now();
        for (int r = 0; r < repeat; ++r) {
            std::string text = base;
            search_replace(text, pattern, repl);
            dummy += text.size();
        }
        auto t2 = clock::now();
        std::cout << "Time: "
                  << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
                  << " ms\n";
        if (dummy == 42) std::cerr << ""; // prevent optimization
    }
    return 0;
}


Previous attempt info:
Original execution time: mean = 9082.20 ms, std = 190.42 ms