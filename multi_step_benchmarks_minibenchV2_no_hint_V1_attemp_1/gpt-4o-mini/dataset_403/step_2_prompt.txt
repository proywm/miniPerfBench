You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include "recycling.hpp"

void updateBiowasteRecycling(std::vector<Residence*>& residences,
                             std::vector<Recycling*>& recyclingFacilities) {
    if (residences.empty() || recyclingFacilities.empty()) return;

    auto residenceIterator = residences.begin();
    for (auto recyclingFacility : recyclingFacilities) {
        int count = 0;

        // Consider a different control path
        if (!recyclingFacility->operational()) { continue; }

        for (; residenceIterator != residences.end(); ++residenceIterator) {
            Residence* residence = static_cast<Residence*>(*residenceIterator);
            residence->pullWaste(30);
            ++count;
            if (count >= 10) { break; }
        }
    }
}


// recycling.hpp
#ifndef RECYCLING_HPP
#define RECYCLING_HPP
#include <vector>

struct Residence {
    int waste = 100;
    void pullWaste(int amount) { waste -= amount; }
};

struct Recycling {
    bool operational_ = true;
    int capacity = 30;
    int support = 10;

    bool operational() const { return operational_; }
    int wasteProcessingCapacity() const { return capacity; }
    int residentialSupportCount() const { return support; }
};

#endif // RECYCLING_HPP


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include "recycling.hpp"
#include <chrono>
#include <iostream>
#include <string>
#include <vector>

void updateBiowasteRecycling(std::vector<Residence*>& residences,
                             std::vector<Recycling*>& recyclingFacilities);

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    std::string impl = "original";
    int numRes = 100;
    int numRec = 100000;
    int repeat = 120000;

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg == "--impl=optimized") impl = "optimized";
        else if (arg == "--impl=original") impl = "original";
        else if (arg.rfind("--residences=",0)==0) numRes = std::stoi(arg.substr(13));
        else if (arg.rfind("--recycling=",0)==0) numRec = std::stoi(arg.substr(12));
        else if (arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
    }

    std::vector<Residence> res_store(numRes);
    std::vector<Residence*> residences;
    residences.reserve(numRes);
    for (auto& r : res_store) residences.push_back(&r);

    std::vector<Recycling> rec_store(numRec);
    std::vector<Recycling*> recyclers;
    recyclers.reserve(numRec);
    for (auto& r : rec_store) recyclers.push_back(&r);

    if (mode == "correct") {
        if (impl == "optimized")
            updateBiowasteRecycling(residences, recyclers);
        else
            updateBiowasteRecycling(residences, recyclers);
        long long sum = 0;
        for (auto* r : residences) sum += r->waste;
        std::cout << sum << '\n';
    } else {
        using clock = std::chrono::high_resolution_clock;
        auto t1 = clock::now();
        for (int i = 0; i < repeat; ++i) {
            for (auto& r : res_store) r.waste = 100;
            updateBiowasteRecycling(residences, recyclers);
        }
        auto t2 = clock::now();
        std::cout << "Time: " << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count() << " ms\n";
    }
    return 0;
}


// recycling.hpp
#ifndef RECYCLING_HPP
#define RECYCLING_HPP
#include <vector>

struct Residence {
    int waste = 100;
    void pullWaste(int amount) { waste -= amount; }
};

struct Recycling {
    bool operational_ = true;
    int capacity = 30;
    int support = 10;

    bool operational() const { return operational_; }
    int wasteProcessingCapacity() const { return capacity; }
    int residentialSupportCount() const { return support; }
};

#endif // RECYCLING_HPP


Previous attempt info:
Original execution time: mean = 8012.60 ms, std = 7.37 ms
Diff from original code:
--- original
+++ step_1
@@ -1,45 +1,22 @@
-// original.cpp
 #include "recycling.hpp"
 
 void updateBiowasteRecycling(std::vector<Residence*>& residences,
                              std::vector<Recycling*>& recyclingFacilities) {
     if (residences.empty() || recyclingFacilities.empty()) return;
 
-    auto residenceIterator = residences.begin();
     for (auto recyclingFacility : recyclingFacilities) {
-        int count = 0;
-
-        // Consider a different control path
+        // Check if the recycling facility is operational and reserve iterators only when necessary
         if (!recyclingFacility->operational()) { continue; }
 
-        for (; residenceIterator != residences.end(); ++residenceIterator) {
-            Residence* residence = static_cast<Residence*>(*residenceIterator);
+        int count = 0;
+        // Directly access elements instead of using an iterator
+        for (size_t i = 0; i < residences.size() && count < 10; ++i) {
+            Residence* residence = residences[i]; // Avoid using iterator to access residence
             residence->pullWaste(30);
             ++count;
-            if (count >= 10) { break; }
         }
     }
 }
 
 
-// recycling.hpp
-#ifndef RECYCLING_HPP
-#define RECYCLING_HPP
-#include <vector>
-
-struct Residence {
-    int waste = 100;
-    void pullWaste(int amount) { waste -= amount; }
-};
-
-struct Recycling {
-    bool operational_ = true;
-    int capacity = 30;
-    int support = 10;
-
-    bool operational() const { return operational_; }
-    int wasteProcessingCapacity() const { return capacity; }
-    int residentialSupportCount() const { return support; }
-};
-
-#endif // RECYCLING_HPP
+// Explicit template instantiations (if any) follow here.
Compilation failed. Output:
/workspace/llm_outputs/multi_step_benchmarks_minibenchV2_no_hint_V1_attemp_1/gpt-4o-mini/dataset_403/step_1.cpp: In function ‘void updateBiowasteRecycling(std::vector<Residence*>&, std::vector<Recycling*>&)’:
/workspace/llm_outputs/multi_step_benchmarks_minibenchV2_no_hint_V1_attemp_1/gpt-4o-mini/dataset_403/step_1.cpp:13:14: error: ‘size_t’ was not declared in this scope; did you mean ‘std::size_t’?
   13 |         for (size_t i = 0; i < residences.size() && count < 10; ++i) {
      |              ^~~~~~
      |              std::size_t
In file included from /usr/include/c++/11/bits/stl_algobase.h:59,
                 from /usr/include/c++/11/vector:60,
                 from /workspace/benchmarks/dataset_403/recycling.hpp:3,
                 from /workspace/llm_outputs/multi_step_benchmarks_minibenchV2_no_hint_V1_attemp_1/gpt-4o-mini/dataset_403/step_1.cpp:1:
/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h:280:33: note: ‘std::size_t’ declared here
  280 |   typedef __SIZE_TYPE__         size_t;
      |                                 ^~~~~~
/workspace/llm_outputs/multi_step_benchmarks_minibenchV2_no_hint_V1_attemp_1/gpt-4o-mini/dataset_403/step_1.cpp:13:28: error: ‘i’ was not declared in this scope
   13 |         for (size_t i = 0; i < residences.size() && count < 10; ++i) {
      |                            ^

LLM analysis: The optimizations include removing unnecessary iterator usage to directly access elements in the residences vector, which reduces overhead. I also combined the loop condition checks to minimize the number of comparisons made. Additionally, the operational check is now performed upon each recycling facility without iterating through the residences unnecessarily when operational status is false.