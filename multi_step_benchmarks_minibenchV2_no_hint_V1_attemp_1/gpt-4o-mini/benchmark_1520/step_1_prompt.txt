You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// distance_table.hpp
#pragma once
#include <vector>
#include <array>
#include <cmath>
#include <algorithm>
#include <omp.h>

struct ParticleSet {
    std::vector<std::array<double,3>> RSoA; // source positions
    std::vector<std::array<double,3>> R;    // target positions
};

inline int getAlignment() { return 64 / sizeof(double); }

inline void FairDivideAligned(int total, int align,
                              int num_threads, int thread,
                              int& first, int& last)
{
    int chunk = (total + num_threads - 1) / num_threads;
    chunk = ((chunk + align - 1) / align) * align;
    first = thread * chunk;
    last = std::min(total, first + chunk);
    if (first > last) first = last = total;
}

struct DistanceHelper {
    static void computeDistances(const std::array<double,3>& tgt,
                                 const std::vector<std::array<double,3>>& src,
                                 std::vector<double>& dist,
                                 std::vector<std::array<double,3>>& disp,
                                 int first, int last)
    {
        for (int j = first; j < last; ++j) {
            std::array<double,3> diff = {src[j][0] - tgt[0],
                                         src[j][1] - tgt[1],
                                         src[j][2] - tgt[2]};
            disp[j] = diff;
            dist[j] = std::sqrt(diff[0]*diff[0] + diff[1]*diff[1] + diff[2]*diff[2]);
        }
    }
};

struct SoaDistanceTableBA {
    int Nsources;
    int Ntargets;
    ParticleSet* Origin;
    std::vector<std::vector<double>> Distances;
    std::vector<std::vector<std::array<double,3>>> Displacements;

    SoaDistanceTableBA(ParticleSet& src, ParticleSet& tgt)
        : Nsources(src.RSoA.size()), Ntargets(tgt.R.size()), Origin(&src)
    {
        Distances.assign(Ntargets, std::vector<double>(Nsources));
        Displacements.assign(Ntargets, std::vector<std::array<double,3>>(Nsources));
    }
};

void evaluate(SoaDistanceTableBA& table, ParticleSet& P);


// original.cpp
#include "distance_table.hpp"

void evaluate(SoaDistanceTableBA& table, ParticleSet& P)
{
    for (int iat = 0; iat < table.Ntargets; ++iat)
        DistanceHelper::computeDistances(P.R[iat], table.Origin->RSoA,
                                          table.Distances[iat], table.Displacements[iat],
                                          0, table.Nsources);
}


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include "distance_table.hpp"
#include <chrono>
#include <iostream>
#include <string>
#include <random>
#include <omp.h>

void evaluate(SoaDistanceTableBA& table, ParticleSet& P);

ParticleSet create_sources(int n) {
    ParticleSet p; p.RSoA.resize(n);
    std::mt19937 gen(42);
    std::uniform_real_distribution<double> dist(0.0, 1.0);
    for (auto &v : p.RSoA)
        for (double &x : v) x = dist(gen);
    return p;
}

ParticleSet create_targets(int n) {
    ParticleSet p; p.R.resize(n);
    std::mt19937 gen(1337);
    std::uniform_real_distribution<double> dist(0.0, 1.0);
    for (auto &v : p.R)
        for (double &x : v) x = dist(gen);
    return p;
}

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    std::string impl = "original"; // parsed for compatibility
    int sources = 2048;
    int targets = 2048;
    int repeat = 800;
    int threads = std::min(4, omp_get_max_threads());


    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg == "--impl=optimized") impl = "optimized";
        else if (arg == "--impl=original") impl = "original";
        else if (arg.rfind("--sources=",0)==0) sources = std::stoi(arg.substr(10));
        else if (arg.rfind("--targets=",0)==0) targets = std::stoi(arg.substr(10));
        else if (arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
        else if (arg.rfind("--threads=",0)==0) threads = std::stoi(arg.substr(10));
    }

    omp_set_num_threads(threads);


    ParticleSet src = create_sources(sources);
    ParticleSet tgt = create_targets(targets);
    SoaDistanceTableBA table(src, tgt);

    if (mode == "correct") {
        evaluate(table, tgt);
        double sum = 0.0;
        for (const auto& row : table.Distances)
            for (double d : row) sum += d;
        std::cout << sum << '\n';
    } else {
        using clock = std::chrono::high_resolution_clock;
        auto t1 = clock::now();
        for (int r = 0; r < repeat; ++r) evaluate(table, tgt);
        auto t2 = clock::now();
        std::cout << "Time: " << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count() << " ms\n";
    }
    return 0;
}


// distance_table.hpp
#pragma once
#include <vector>
#include <array>
#include <cmath>
#include <algorithm>
#include <omp.h>

struct ParticleSet {
    std::vector<std::array<double,3>> RSoA; // source positions
    std::vector<std::array<double,3>> R;    // target positions
};

inline int getAlignment() { return 64 / sizeof(double); }

inline void FairDivideAligned(int total, int align,
                              int num_threads, int thread,
                              int& first, int& last)
{
    int chunk = (total + num_threads - 1) / num_threads;
    chunk = ((chunk + align - 1) / align) * align;
    first = thread * chunk;
    last = std::min(total, first + chunk);
    if (first > last) first = last = total;
}

struct DistanceHelper {
    static void computeDistances(const std::array<double,3>& tgt,
                                 const std::vector<std::array<double,3>>& src,
                                 std::vector<double>& dist,
                                 std::vector<std::array<double,3>>& disp,
                                 int first, int last)
    {
        for (int j = first; j < last; ++j) {
            std::array<double,3> diff = {src[j][0] - tgt[0],
                                         src[j][1] - tgt[1],
                                         src[j][2] - tgt[2]};
            disp[j] = diff;
            dist[j] = std::sqrt(diff[0]*diff[0] + diff[1]*diff[1] + diff[2]*diff[2]);
        }
    }
};

struct SoaDistanceTableBA {
    int Nsources;
    int Ntargets;
    ParticleSet* Origin;
    std::vector<std::vector<double>> Distances;
    std::vector<std::vector<std::array<double,3>>> Displacements;

    SoaDistanceTableBA(ParticleSet& src, ParticleSet& tgt)
        : Nsources(src.RSoA.size()), Ntargets(tgt.R.size()), Origin(&src)
    {
        Distances.assign(Ntargets, std::vector<double>(Nsources));
        Displacements.assign(Ntargets, std::vector<std::array<double,3>>(Nsources));
    }
};

void evaluate(SoaDistanceTableBA& table, ParticleSet& P);


Previous attempt info:
Original execution time: mean = 6942.60 ms, std = 10.74 ms