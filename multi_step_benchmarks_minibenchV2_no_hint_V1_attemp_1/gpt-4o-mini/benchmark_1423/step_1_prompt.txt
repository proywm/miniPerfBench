You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include <string>
#include <vector>
#include <queue>
#include <algorithm>
#include <sstream>

// Compute reverse complement of a DNA string
static std::string reverse_complement(const std::string& seq) {
    std::stringstream ret;
    for(char c : seq) {
        switch(c) {
            case 'A': ret << 'T'; break;
            case 'a': ret << 't'; break;
            case 'T': ret << 'A'; break;
            case 't': ret << 'a'; break;
            case 'C': ret << 'G'; break;
            case 'c': ret << 'g'; break;
            case 'G': ret << 'C'; break;
            case 'g': ret << 'c'; break;
            default:  ret << c;  break;
        }
    }
    return ret.str();
}

static std::string reverse_str(const std::string& seq) {
    std::string copy(seq);
    std::reverse(copy.begin(), copy.end());
    return copy;
}

// Build a heap of canonical kmers (lexicographically smaller between kmer and reverse complement)
std::priority_queue<std::string> kmer_heap(const std::string& seq, const std::vector<int>& kmer) {
    std::vector<std::string> base;
    for(int k : kmer) {
        std::vector<std::string> out(seq.length() - k, "");
        for(int i = 0; i < (int)seq.length() - k; ++i) {
            std::string forward = seq.substr(i, k);
            std::string revrev = reverse_str(reverse_complement(forward));
            out[i] = (revrev < forward ? revrev : forward);
        }
        base.reserve(base.size() + out.size());
        base.insert(base.end(), out.begin(), out.end());
    }
    std::priority_queue<std::string> ret(base.begin(), base.end());
    return ret;
}


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include <chrono>
#include <iostream>
#include <string>
#include <vector>
#include <random>
#include <algorithm>
#include <queue>
#ifdef _OPENMP
#include <omp.h>
#endif

std::priority_queue<std::string> kmer_heap(const std::string&, const std::vector<int>&);

// Generate random DNA sequence of length n
static std::string make_sequence(int n) {
    const char bases[] = {'A','C','G','T'};
    std::mt19937 gen(42);
    std::uniform_int_distribution<int> dist(0,3);
    std::string seq(n,'A');
    for(int i=0;i<n;++i) seq[i] = bases[dist(gen)];
    return seq;
}

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    int length = 5000;
    int repeat = 1500;
    int threads = 4;

    for(int i=1;i<argc;++i){
        std::string arg = argv[i];
        if(arg=="--mode=correct") mode = "correct";
        else if(arg=="--mode=perf") mode = "perf";
        else if(arg.rfind("--length=",0)==0) length = std::stoi(arg.substr(9));
        else if(arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
        else if(arg.rfind("--threads=",0)==0) threads = std::stoi(arg.substr(10));
    }

#ifdef _OPENMP
    threads = std::min(threads, omp_get_max_threads());
    omp_set_num_threads(threads);
#endif

    std::string seq = make_sequence(length);
    std::vector<int> kmer_sizes{10,15,20};

    if(mode=="correct") {
        auto pq = kmer_heap(seq, kmer_sizes);
        size_t sum = 0;
        while(!pq.empty()) { sum += pq.top().size(); pq.pop(); }
        std::cout << sum << "\n";
    } else {
        using clock = std::chrono::high_resolution_clock;
        auto t1 = clock::now();
        size_t dummy = 0;
        for(int r=0;r<repeat;++r) {
            auto pq = kmer_heap(seq, kmer_sizes);
            dummy += pq.size();
        }
        auto t2 = clock::now();
        std::cout << "Time: " << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count() << " ms\n";
        if(dummy==123456789) std::cerr << "";
    }
    return 0;
}


Previous attempt info:
Original execution time: mean = 9874.60 ms, std = 112.41 ms