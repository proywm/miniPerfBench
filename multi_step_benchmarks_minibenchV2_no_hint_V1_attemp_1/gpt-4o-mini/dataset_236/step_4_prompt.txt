You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include "styled_renderable.hpp"

void render_item(StyledRenderable& item) {
    if (ImGuiSim::IsItemActivated() && item.OnActivate) {
        item.Manager->Call(item.OnActivate, item.Handle);
    }
    if (ImGuiSim::IsItemDeactivated() && item.OnDeactivate) {
        item.Manager->Call(item.OnDeactivate, item.Handle);
    }
}


// styled_renderable.hpp
#pragma once
#include <cstddef>

namespace ImGuiSim {
inline volatile int sink = 0;
inline bool IsItemActivated() {
    int sum = 0;
    for (int i = 0; i < 10000; ++i) sum += (i + sink) % 3;
    sink += sum;
    return sum & 1;
}
inline bool IsItemDeactivated() {
    int sum = 0;
    for (int i = 0; i < 10000; ++i) sum += (i + sink) % 5;
    sink += sum;
    return sum & 1;
}
}

using Callback = void(*)(int&);

struct EventManager {
    int counter = 0;
    void Call(Callback cb, int handle) {
        if (cb) cb(counter);
    }
};

struct StyledRenderable {
    EventManager* Manager = nullptr;
    Callback OnActivate = nullptr;
    Callback OnDeactivate = nullptr;
    int Handle = 0;
};

void render_item(StyledRenderable& item);


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include "styled_renderable.hpp"
#include <chrono>
#include <iostream>
#include <string>
#include <vector>

static void callback(int& c) { ++c; }

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    std::size_t count = 200;
    int repeat = 1000;

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg.rfind("--count=",0)==0) count = static_cast<std::size_t>(std::stoul(arg.substr(8)));
        else if (arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
    }

    EventManager mgr;
    std::vector<StyledRenderable> items(count);
    for (std::size_t i = 0; i < count; ++i) {
        items[i].Manager = &mgr;
        items[i].OnActivate = (i % 10 == 0) ? callback : nullptr;
        items[i].OnDeactivate = (i % 15 == 0) ? callback : nullptr;
        items[i].Handle = static_cast<int>(i);
    }

    if (mode == "correct") {
        for (auto& it : items) render_item(it);
        std::cout << mgr.counter << "\n";
    } else {
        using clock = std::chrono::high_resolution_clock;
        auto t1 = clock::now();
        for (int r = 0; r < repeat; ++r) {
            for (auto& it : items) render_item(it);
        }
        auto t2 = clock::now();
        std::cout << "Time: "
                  << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
                  << " ms\n";
    }
    return 0;
}


// styled_renderable.hpp
#pragma once
#include <cstddef>

namespace ImGuiSim {
inline volatile int sink = 0;
inline bool IsItemActivated() {
    int sum = 0;
    for (int i = 0; i < 10000; ++i) sum += (i + sink) % 3;
    sink += sum;
    return sum & 1;
}
inline bool IsItemDeactivated() {
    int sum = 0;
    for (int i = 0; i < 10000; ++i) sum += (i + sink) % 5;
    sink += sum;
    return sum & 1;
}
}

using Callback = void(*)(int&);

struct EventManager {
    int counter = 0;
    void Call(Callback cb, int handle) {
        if (cb) cb(counter);
    }
};

struct StyledRenderable {
    EventManager* Manager = nullptr;
    Callback OnActivate = nullptr;
    Callback OnDeactivate = nullptr;
    int Handle = 0;
};

void render_item(StyledRenderable& item);


Previous attempt info:
Original execution time: mean = 3012.20 ms, std = 0.84 ms
Diff from original code:
--- original
+++ step_1
@@ -1,50 +1,19 @@
-// original.cpp
 #include "styled_renderable.hpp"
 
 void render_item(StyledRenderable& item) {
-    if (ImGuiSim::IsItemActivated() && item.OnActivate) {
+    // Store the results of IsItemActivated and IsItemDeactivated to avoid repetitive calls.
+    bool activated = ImGuiSim::IsItemActivated();
+    bool deactivated = ImGuiSim::IsItemDeactivated();
+    
+    // Only check for activation if it has been activated.
+    if (activated && item.OnActivate) {
         item.Manager->Call(item.OnActivate, item.Handle);
     }
-    if (ImGuiSim::IsItemDeactivated() && item.OnDeactivate) {
+    // Only check for deactivation if it has been deactivated.
+    if (deactivated && item.OnDeactivate) {
         item.Manager->Call(item.OnDeactivate, item.Handle);
     }
 }
 
 
-// styled_renderable.hpp
-#pragma once
-#include <cstddef>
-
-namespace ImGuiSim {
-inline volatile int sink = 0;
-inline bool IsItemActivated() {
-    int sum = 0;
-    for (int i = 0; i < 10000; ++i) sum += (i + sink) % 3;
-    sink += sum;
-    return sum & 1;
-}
-inline bool IsItemDeactivated() {
-    int sum = 0;
-    for (int i = 0; i < 10000; ++i) sum += (i + sink) % 5;
-    sink += sum;
-    return sum & 1;
-}
-}
-
-using Callback = void(*)(int&);
-
-struct EventManager {
-    int counter = 0;
-    void Call(Callback cb, int handle) {
-        if (cb) cb(counter);
-    }
-};
-
-struct StyledRenderable {
-    EventManager* Manager = nullptr;
-    Callback OnActivate = nullptr;
-    Callback OnDeactivate = nullptr;
-    int Handle = 0;
-};
-
-void render_item(StyledRenderable& item);
+// Explicit template instantiations
Compilation succeeded. Execution time: mean = 3282.80 ms, std = 0.45 ms. Original execution time: mean = 3012.20 ms, std = 0.84 ms
LLM analysis: The optimizations are centered around reducing redundant calls to the IsItemActivated() and IsItemDeactivated() functions. By storing their results in local variables, we avoid recalculating these values multiple times while keeping the logic intact. This change should improve performance, especially under high iteration counts in the main loop.
Diff from original code:
--- original
+++ step_2
@@ -1,50 +1,17 @@
-// original.cpp
 #include "styled_renderable.hpp"
 
 void render_item(StyledRenderable& item) {
-    if (ImGuiSim::IsItemActivated() && item.OnActivate) {
+    // Store the state of item activation and deactivation
+    bool activated = ImGuiSim::IsItemActivated();
+    bool deactivated = ImGuiSim::IsItemDeactivated();
+
+    // Use the stored state to call callbacks
+    if (activated && item.OnActivate) {
         item.Manager->Call(item.OnActivate, item.Handle);
     }
-    if (ImGuiSim::IsItemDeactivated() && item.OnDeactivate) {
+    if (deactivated && item.OnDeactivate) {
         item.Manager->Call(item.OnDeactivate, item.Handle);
     }
 }
 
-
-// styled_renderable.hpp
-#pragma once
-#include <cstddef>
-
-namespace ImGuiSim {
-inline volatile int sink = 0;
-inline bool IsItemActivated() {
-    int sum = 0;
-    for (int i = 0; i < 10000; ++i) sum += (i + sink) % 3;
-    sink += sum;
-    return sum & 1;
-}
-inline bool IsItemDeactivated() {
-    int sum = 0;
-    for (int i = 0; i < 10000; ++i) sum += (i + sink) % 5;
-    sink += sum;
-    return sum & 1;
-}
-}
-
-using Callback = void(*)(int&);
-
-struct EventManager {
-    int counter = 0;
-    void Call(Callback cb, int handle) {
-        if (cb) cb(counter);
-    }
-};
-
-struct StyledRenderable {
-    EventManager* Manager = nullptr;
-    Callback OnActivate = nullptr;
-    Callback OnDeactivate = nullptr;
-    int Handle = 0;
-};
-
-void render_item(StyledRenderable& item);
+// Explicit template instantiations
Compilation succeeded. Execution time: mean = 3282.20 ms, std = 1.30 ms. Original execution time: mean = 3012.20 ms, std = 0.84 ms
LLM analysis: The modified code consolidates the activation status checks into local variables to avoid redundant calls to IsItemActivated and IsItemDeactivated. This not only reduces function call overhead but also enhances branch prediction effectiveness by limiting checks within the same logical context. The intent is to optimize performance, especially under the repeated execution scenario in harness.cpp, while maintaining the behavior of the original function.
Diff from original code:
--- original
+++ step_3
@@ -1,50 +1,17 @@
-// original.cpp
 #include "styled_renderable.hpp"
 
 void render_item(StyledRenderable& item) {
-    if (ImGuiSim::IsItemActivated() && item.OnActivate) {
+    // Store the state of item activation and deactivation
+    bool activated = ImGuiSim::IsItemActivated();
+    bool deactivated = ImGuiSim::IsItemDeactivated();
+
+    // Use the stored state to call callbacks
+    if (activated && item.OnActivate) {
         item.Manager->Call(item.OnActivate, item.Handle);
     }
-    if (ImGuiSim::IsItemDeactivated() && item.OnDeactivate) {
+    if (deactivated && item.OnDeactivate) {
         item.Manager->Call(item.OnDeactivate, item.Handle);
     }
 }
 
-
-// styled_renderable.hpp
-#pragma once
-#include <cstddef>
-
-namespace ImGuiSim {
-inline volatile int sink = 0;
-inline bool IsItemActivated() {
-    int sum = 0;
-    for (int i = 0; i < 10000; ++i) sum += (i + sink) % 3;
-    sink += sum;
-    return sum & 1;
-}
-inline bool IsItemDeactivated() {
-    int sum = 0;
-    for (int i = 0; i < 10000; ++i) sum += (i + sink) % 5;
-    sink += sum;
-    return sum & 1;
-}
-}
-
-using Callback = void(*)(int&);
-
-struct EventManager {
-    int counter = 0;
-    void Call(Callback cb, int handle) {
-        if (cb) cb(counter);
-    }
-};
-
-struct StyledRenderable {
-    EventManager* Manager = nullptr;
-    Callback OnActivate = nullptr;
-    Callback OnDeactivate = nullptr;
-    int Handle = 0;
-};
-
-void render_item(StyledRenderable& item);
+// Explicit template instantiations
Compilation succeeded. Execution time: mean = 3282.40 ms, std = 1.14 ms. Original execution time: mean = 3012.20 ms, std = 0.84 ms
LLM analysis: The optimizations focus on reducing the computational overhead by avoiding repeated calls to the IsItemActivated and IsItemDeactivated functions. The results of these functions are stored in local variables, allowing for a single call per render_item invocation. This adjustment aims to enhance performance, particularly when render_item is called in a loop, as seen in harness.cpp, while ensuring the original behavior is preserved.