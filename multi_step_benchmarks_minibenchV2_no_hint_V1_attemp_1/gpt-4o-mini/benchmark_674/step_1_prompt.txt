You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// athena_array.hpp
#pragma once
#include <vector>

constexpr int IDN=0;
constexpr int IM1=1;
constexpr int IM2=2;
constexpr int IM3=3;
constexpr int IEN=4;
constexpr int IVX=5;
constexpr int IVY=6;
constexpr int IVZ=7;
constexpr int NHYDRO=8;
constexpr double GAMMA=1.4;

template<typename T>
struct AthenaArray {
    int nvar, nk, nj, ni;
    std::vector<T> data;
    AthenaArray(int nvar,int nk,int nj,int ni)
        : nvar(nvar), nk(nk), nj(nj), ni(ni), data(nvar*nk*nj*ni) {}
    T& operator()(int n,int k,int j,int i) {
        return data[((n*nk + k)*nj + j)*ni + i];
    }
    const T& operator()(int n,int k,int j,int i) const {
        return data[((n*nk + k)*nj + j)*ni + i];
    }
};


// original.cpp
#include "athena_array.hpp"
#include <omp.h>

void PrimitiveToConserved(const AthenaArray<double>& prim, AthenaArray<double>& cons,
        int is, int ie, int js, int je, int ks, int ke, int nthreads) {
    double igm1 = 1.0 / (GAMMA - 1.0);
#pragma omp parallel default(shared) num_threads(nthreads)
    {
        for (int k = ks; k <= ke; ++k) {
#pragma omp for schedule(dynamic)
            for (int j = js; j <= je; ++j) {
#pragma simd
                for (int i = is; i <= ie; ++i) {
                    double w_d  = prim(IDN,k,j,i);
                    double w_vx = prim(IVX,k,j,i);
                    double w_vy = prim(IVY,k,j,i);
                    double w_vz = prim(IVZ,k,j,i);
                    double w_p  = prim(IEN,k,j,i);
                    cons(IDN,k,j,i) = w_d;
                    cons(IM1,k,j,i) = w_vx * w_d;
                    cons(IM2,k,j,i) = w_vy * w_d;
                    cons(IM3,k,j,i) = w_vz * w_d;
                    cons(IEN,k,j,i) = w_p * igm1 + 0.5 * w_d * (w_vx*w_vx + w_vy*w_vy + w_vz*w_vz);
                }
            }
        }
    }
}


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include "athena_array.hpp"
#include <chrono>
#include <iostream>
#include <random>
#include <string>
#include <omp.h>

void PrimitiveToConserved(const AthenaArray<double>& prim, AthenaArray<double>& cons,
        int is, int ie, int js, int je, int ks, int ke, int nthreads);

AthenaArray<double> make_array(int size) {
    AthenaArray<double> arr(NHYDRO, size, size, size);
    std::mt19937 gen(42);
    std::uniform_real_distribution<double> dist(0.0, 1.0);
    for (int n = 0; n < NHYDRO; ++n)
        for (int k = 0; k < size; ++k)
            for (int j = 0; j < size; ++j)
                for (int i = 0; i < size; ++i)
                    arr(n,k,j,i) = dist(gen);
    return arr;
}

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    int size = 20;
    int repeat = 50000;
    int threads = std::min(4, omp_get_max_threads());

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg.rfind("--size=",0) == 0) size = std::stoi(arg.substr(7));
        else if (arg.rfind("--repeat=",0) == 0) repeat = std::stoi(arg.substr(9));
        else if (arg.rfind("--threads=",0) == 0) threads = std::stoi(arg.substr(10));
    }

    AthenaArray<double> prim = make_array(size);
    AthenaArray<double> cons(NHYDRO, size, size, size);

    if (mode == "correct") {
        PrimitiveToConserved(prim, cons, 0, size-1, 0, size-1, 0, size-1, threads);
        double sum = 0.0;
        for (double v : cons.data) sum += v;
        std::cout << sum << '\n';
    } else {
        using clock = std::chrono::high_resolution_clock;
        auto t1 = clock::now();
        for (int r = 0; r < repeat; ++r)
            PrimitiveToConserved(prim, cons, 0, size-1, 0, size-1, 0, size-1, threads);
        auto t2 = clock::now();
        std::cout << "Time: "
                  << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
                  << " ms\n";
    }
    return 0;
}


// athena_array.hpp
#pragma once
#include <vector>

constexpr int IDN=0;
constexpr int IM1=1;
constexpr int IM2=2;
constexpr int IM3=3;
constexpr int IEN=4;
constexpr int IVX=5;
constexpr int IVY=6;
constexpr int IVZ=7;
constexpr int NHYDRO=8;
constexpr double GAMMA=1.4;

template<typename T>
struct AthenaArray {
    int nvar, nk, nj, ni;
    std::vector<T> data;
    AthenaArray(int nvar,int nk,int nj,int ni)
        : nvar(nvar), nk(nk), nj(nj), ni(ni), data(nvar*nk*nj*ni) {}
    T& operator()(int n,int k,int j,int i) {
        return data[((n*nk + k)*nj + j)*ni + i];
    }
    const T& operator()(int n,int k,int j,int i) const {
        return data[((n*nk + k)*nj + j)*ni + i];
    }
};


Previous attempt info:
Original execution time: mean = 4480.00 ms, std = 43.61 ms