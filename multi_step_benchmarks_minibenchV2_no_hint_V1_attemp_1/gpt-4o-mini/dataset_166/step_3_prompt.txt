You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include <algorithm>
#include <vector>
#include <utility>

// Original top-k implementation without preallocation

void topk(const std::vector<float>& input, size_t row, size_t col, size_t k,
          std::vector<float>& output, std::vector<size_t>& indices) {
    output.resize(row * k);
    indices.resize(row * k);
    for (size_t i = 0; i < row; ++i) {
        std::vector<std::pair<float, size_t>> vec; // no reserve
        for (size_t j = 0; j < col; ++j) {
            vec.push_back(std::pair<float, size_t>(input[i * col + j], j));
        }
        std::partial_sort(vec.begin(), vec.begin() + k, vec.end(),
                          [](const std::pair<float, size_t>& l,
                             const std::pair<float, size_t>& r) {
                              return l.first > r.first;
                          });
        for (size_t j = 0; j < k; ++j) {
            output[i * k + j] = vec[j].first;
            indices[i * k + j] = vec[j].second;
        }
    }
}



The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include <chrono>
#include <iostream>
#include <random>
#include <string>
#include <vector>

// declaration
void topk(const std::vector<float>& input, size_t row, size_t col, size_t k,
          std::vector<float>& output, std::vector<size_t>& indices);

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    size_t row = 150;
    size_t col = 1000;
    size_t k = 100;
    int repeat = 3000;  // ensure runtime >10s for original
    std::string impl = "original"; // parsed for compatibility

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct")
            mode = "correct";
        else if (arg == "--mode=perf")
            mode = "perf";
        else if (arg.rfind("--row=", 0) == 0)
            row = static_cast<size_t>(std::stoul(arg.substr(6)));
        else if (arg.rfind("--col=", 0) == 0)
            col = static_cast<size_t>(std::stoul(arg.substr(6)));
        else if (arg.rfind("--k=", 0) == 0)
            k = static_cast<size_t>(std::stoul(arg.substr(4)));
        else if (arg.rfind("--repeat=", 0) == 0)
            repeat = std::stoi(arg.substr(9));
        else if (arg.rfind("--impl=", 0) == 0)
            impl = arg.substr(7);
    }

    std::vector<float> base(row * col);
    std::mt19937 gen(42);
    std::uniform_real_distribution<float> dist(0.0f, 1000.0f);
    for (size_t i = 0; i < base.size(); ++i) base[i] = dist(gen);

    std::vector<float> output;
    std::vector<size_t> indices;

    if (mode == "correct") {
        topk(base, row, col, k, output, indices);
        double sum = 0.0;
        for (float v : output) sum += v;
        std::cout << sum << '\n';
    } else {
        using clock = std::chrono::high_resolution_clock;
        auto t1 = clock::now();
        for (int r = 0; r < repeat; ++r) {
            topk(base, row, col, k, output, indices);
        }
        auto t2 = clock::now();
        std::cout << "Time: "
                  << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
                  << " ms\n";
    }
    return 0;
}


Previous attempt info:
Original execution time: mean = 8745.20 ms, std = 4.82 ms
Diff from original code:
--- original
+++ step_1
@@ -1,18 +1,18 @@
-// original.cpp
 #include <algorithm>
 #include <vector>
 #include <utility>
-
-// Original top-k implementation without preallocation
+#include <memory> // for std::unique_ptr
 
 void topk(const std::vector<float>& input, size_t row, size_t col, size_t k,
           std::vector<float>& output, std::vector<size_t>& indices) {
     output.resize(row * k);
     indices.resize(row * k);
+    std::vector<std::pair<float, size_t>> vec;
+    vec.reserve(k); // Reserve space for k elements only
     for (size_t i = 0; i < row; ++i) {
-        std::vector<std::pair<float, size_t>> vec; // no reserve
+        vec.clear(); // Clear the vector for reuse
         for (size_t j = 0; j < col; ++j) {
-            vec.push_back(std::pair<float, size_t>(input[i * col + j], j));
+            vec.emplace_back(input[i * col + j], j); // use emplace_back for efficiency
         }
         std::partial_sort(vec.begin(), vec.begin() + k, vec.end(),
                           [](const std::pair<float, size_t>& l,
@@ -26,3 +26,7 @@
     }
 }
 
+// Explicit template instantiations
+#include <vector>
+template void topk(const std::vector<float>& input, size_t row, size_t col, size_t k,
+          std::vector<float>& output, std::vector<size_t>& indices);
Compilation failed. Output:
cc1plus: warning: ignoring possibly conflicting option ‘-fopt-info-all’
cc1plus: warning: ignoring possibly conflicting option ‘-fopt-info-all’
/workspace/llm_outputs/multi_step_benchmarks_minibenchV2_no_hint_V1_attemp_1/gpt-4o-mini/dataset_166/step_1.cpp:31:15: error: template-id ‘topk<>’ for ‘void topk(const std::vector<float>&, size_t, size_t, size_t, std::vector<float>&, std::vector<long unsigned int>&)’ does not match any template declaration
   31 | template void topk(const std::vector<float>& input, size_t row, size_t col, size_t k,
      |               ^~~~
/workspace/llm_outputs/multi_step_benchmarks_minibenchV2_no_hint_V1_attemp_1/gpt-4o-mini/dataset_166/step_1.cpp:6:6: note: candidate is: ‘void topk(const std::vector<float>&, size_t, size_t, size_t, std::vector<float>&, std::vector<long unsigned int>&)’
    6 | void topk(const std::vector<float>& input, size_t row, size_t col, size_t k,
      |      ^~~~

LLM analysis: The optimized code introduces a few key improvements: 1) Reserves space in the vector `vec` for `k` elements once, instead of dynamically resizing it during each iteration, reducing memory allocation overhead. 2) It uses `emplace_back` instead of `push_back` for more efficient construction of pairs. 3) Clears `vec` after each row's processing, enabling reuse while maintaining performance. These changes should improve the overall computational efficiency and reduce execution time.
Diff from original code:
--- original
+++ step_2
@@ -1,24 +1,31 @@
-// original.cpp
 #include <algorithm>
 #include <vector>
 #include <utility>
-
-// Original top-k implementation without preallocation
+#include <chrono>
+#include <iostream>
+#include <random>
+#include <string>
+#include <memory>
 
 void topk(const std::vector<float>& input, size_t row, size_t col, size_t k,
           std::vector<float>& output, std::vector<size_t>& indices) {
     output.resize(row * k);
     indices.resize(row * k);
+    std::vector<std::pair<float, size_t>> vec(k);
     for (size_t i = 0; i < row; ++i) {
-        std::vector<std::pair<float, size_t>> vec; // no reserve
+        size_t count = 0;
         for (size_t j = 0; j < col; ++j) {
-            vec.push_back(std::pair<float, size_t>(input[i * col + j], j));
+            if (count < k) {
+                vec[count++] = std::make_pair(input[i * col + j], j);
+            } else if (input[i * col + j] > vec[k - 1].first) {
+                vec[k - 1] = std::make_pair(input[i * col + j], j);
+            }
+            std::partial_sort(vec.begin(), vec.begin() + count, vec.begin() + std::min(count, k), 
+                              [](const std::pair<float, size_t>& l,
+                                 const std::pair<float, size_t>& r) {
+                                     return l.first > r.first;
+                              });
         }
-        std::partial_sort(vec.begin(), vec.begin() + k, vec.end(),
-                          [](const std::pair<float, size_t>& l,
-                             const std::pair<float, size_t>& r) {
-                              return l.first > r.first;
-                          });
         for (size_t j = 0; j < k; ++j) {
             output[i * k + j] = vec[j].first;
             indices[i * k + j] = vec[j].second;
@@ -26,3 +33,7 @@
     }
 }
 
+// Explicit template instantiations
+#include <vector>
+template void topk(const std::vector<float>& input, size_t row, size_t col, size_t k,
+          std::vector<float>& output, std::vector<size_t>& indices);
Compilation failed. Output:
cc1plus: warning: ignoring possibly conflicting option ‘-fopt-info-all’
cc1plus: warning: ignoring possibly conflicting option ‘-fopt-info-all’
/workspace/llm_outputs/multi_step_benchmarks_minibenchV2_no_hint_V1_attemp_1/gpt-4o-mini/dataset_166/step_2.cpp:38:15: error: template-id ‘topk<>’ for ‘void topk(const std::vector<float>&, size_t, size_t, size_t, std::vector<float>&, std::vector<long unsigned int>&)’ does not match any template declaration
   38 | template void topk(const std::vector<float>& input, size_t row, size_t col, size_t k,
      |               ^~~~
/workspace/llm_outputs/multi_step_benchmarks_minibenchV2_no_hint_V1_attemp_1/gpt-4o-mini/dataset_166/step_2.cpp:10:6: note: candidate is: ‘void topk(const std::vector<float>&, size_t, size_t, size_t, std::vector<float>&, std::vector<long unsigned int>&)’
   10 | void topk(const std::vector<float>& input, size_t row, size_t col, size_t k,
      |      ^~~~

LLM analysis: The optimized code introduces a preallocated vector for k pairs, minimizing the allocation overhead inside the loop. It uses a modified approach to conditionally fill the vector only when needed, which allows it to keep track of the top k elements without having to sort and resize repeatedly. This reduces the computational complexity, especially when k is significantly smaller than col, and ensures that the allocation and sorting operations are more efficient.