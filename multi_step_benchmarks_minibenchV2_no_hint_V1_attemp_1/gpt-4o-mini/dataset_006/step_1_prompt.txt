You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>

enum { SORT_A_TO_Z = 0, SORT_Z_TO_A = 1 };

struct RomSelection {
    char name[128];
    char fullpath[256];
    int id;
    int size;
    RomSelection* next;
};

static RomSelection* list = nullptr;
static int gSortOrder = SORT_A_TO_Z;

static void swap_nodes(RomSelection* a, RomSelection* b) {
    char nametmp[128], pathtmp[256];
    sprintf(nametmp, "%s", a->name);
    sprintf(pathtmp, "%s", a->fullpath);
    int idtmp = a->id;
    int sizetmp = a->size;

    sprintf(a->name, "%s", b->name);
    sprintf(a->fullpath, "%s", b->fullpath);
    a->id = b->id;
    a->size = b->size;

    sprintf(b->name, "%s", nametmp);
    sprintf(b->fullpath, "%s", pathtmp);
    b->id = idtmp;
    b->size = sizetmp;
}

static void sort_list(RomSelection* start, int order) {
    if (!start) return;
    int swapped;
    RomSelection* ptr1;
    RomSelection* lptr = nullptr;
    do {
        swapped = 0;
        ptr1 = start;
        while (ptr1->next != lptr) {
            bool cond = false;
            switch(order) {
                case SORT_Z_TO_A:
                    cond = std::strcmp(ptr1->name, ptr1->next->name) < 0;
                    break;
                case SORT_A_TO_Z:
                    cond = std::strcmp(ptr1->name, ptr1->next->name) > 0;
                    break;
                default: break;
            }
            if (cond) {
                swap_nodes(ptr1, ptr1->next);
                swapped = 1;
            }
            ptr1 = ptr1->next;
        }
        lptr = ptr1;
    } while (swapped);
}

static void ensure_list(int count) {
    if (list) return;
    static std::vector<RomSelection> storage;
    storage.resize(count);
    for (int i=0;i<count;i++) {
        sprintf(storage[i].name, "%07d", rand()%100000);
        sprintf(storage[i].fullpath, "rom_%05d", i);
        storage[i].id = i;
        storage[i].size = i;
        storage[i].next = (i+1<count)? &storage[i+1] : nullptr;
    }
    list = &storage[0];
}

size_t draw_loop(int loops) {
    const int roms = 15000;
    ensure_list(roms);

    for (int i=0;i<loops;i++) {
        if (i == loops/2) gSortOrder = SORT_Z_TO_A; // change order once
        sort_list(list, gSortOrder);
    }

    size_t sum=0; RomSelection* p=list; while(p){ sum += static_cast<unsigned char>(p->name[0]); p=p->next; }
    return sum;
}



The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include <chrono>
#include <iostream>
#include <string>

size_t draw_loop(int loops);

int main(int argc, char** argv) {
    std::string mode = "perf";
    int repeat = 110000;

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
    }

    if (mode == "correct") {
        size_t sum = draw_loop(1); // single run for deterministic output
        std::cout << sum << "\n";
    } else {
        using clock = std::chrono::high_resolution_clock;
        auto t1 = clock::now();
        draw_loop(repeat);
        auto t2 = clock::now();
        std::cout << "Time: " << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count() << " ms\n";
    }
    return 0;
}



Previous attempt info:
Original execution time: mean = 36479.00 ms, std = 1567.20 ms