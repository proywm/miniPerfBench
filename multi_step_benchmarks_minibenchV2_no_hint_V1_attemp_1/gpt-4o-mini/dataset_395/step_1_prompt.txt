You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// original.cpp
#include "shared.hpp"

bool RifColumnBasedUserData::values(const int& resultAddress, std::vector<double>* values) const {
    auto search = m_map.find(resultAddress);
    if (search != m_map.end()) {
        auto tableColIndices = search->second;
        const ColumnInfo* ci = m_parser->columnInfo(tableColIndices.first, tableColIndices.second);
        if (!ci) return false;

        for (const auto& v : ci->values) {
            values->push_back(v);
        }
    }
    return true;
}

// explicit instantiation helper if needed


// shared.hpp
#ifndef RIF_COLUMN_BASED_USER_DATA_HPP
#define RIF_COLUMN_BASED_USER_DATA_HPP
#include <vector>
#include <unordered_map>
#include <memory>
#include <cstddef>

struct ColumnInfo {
    std::vector<double> values;
};

class Parser {
public:
    std::vector<std::vector<ColumnInfo>> cols;
    Parser(std::size_t num_values) {
        cols.resize(1);
        cols[0].resize(1);
        cols[0][0].values.reserve(num_values);
        for (std::size_t i = 0; i < num_values; ++i) {
            cols[0][0].values.push_back(static_cast<double>(i));
        }
    }
    const ColumnInfo* columnInfo(std::size_t table, std::size_t col) const {
        if (table >= cols.size() || col >= cols[table].size()) return nullptr;
        return &cols[table][col];
    }
};

class RifColumnBasedUserData {
    std::unordered_map<int, std::pair<std::size_t,std::size_t>> m_map;
    std::unique_ptr<Parser> m_parser;
public:
    explicit RifColumnBasedUserData(std::size_t num_values)
        : m_parser(std::make_unique<Parser>(num_values)) {
        m_map[0] = {0,0};
    }

    bool values(const int& resultAddress, std::vector<double>* values) const;
};

#endif


The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include "shared.hpp"
#include <chrono>
#include <iostream>
#include <string>
#include <vector>

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    std::size_t size = 10000;
    int repeat = 100000;

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct")
            mode = "correct";
        else if (arg == "--mode=perf")
            mode = "perf";
        else if (arg.rfind("--size=",0)==0)
            size = static_cast<std::size_t>(std::stoul(arg.substr(7)));
        else if (arg.rfind("--repeat=",0)==0)
            repeat = std::stoi(arg.substr(9));
    }

    RifColumnBasedUserData data(size);

    if (mode == "correct") {
        std::vector<double> vals;
        data.values(0, &vals);
        double sum = 0.0;
        for (double v : vals) sum += v;
        std::cout << sum << '\n';
    } else {
        using clock = std::chrono::high_resolution_clock;
        double dummy = 0.0;
        auto t1 = clock::now();
        for (int r = 0; r < repeat; ++r) {
            std::vector<double> vals;
            data.values(0, &vals);
            dummy += vals.empty() ? 0.0 : vals[0];
        }
        auto t2 = clock::now();
        std::cout << "Time: "
                  << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
                  << " ms\n";
        if (dummy == 123456789.0) std::cerr << "";
    }
    return 0;
}


// shared.hpp
#ifndef RIF_COLUMN_BASED_USER_DATA_HPP
#define RIF_COLUMN_BASED_USER_DATA_HPP
#include <vector>
#include <unordered_map>
#include <memory>
#include <cstddef>

struct ColumnInfo {
    std::vector<double> values;
};

class Parser {
public:
    std::vector<std::vector<ColumnInfo>> cols;
    Parser(std::size_t num_values) {
        cols.resize(1);
        cols[0].resize(1);
        cols[0][0].values.reserve(num_values);
        for (std::size_t i = 0; i < num_values; ++i) {
            cols[0][0].values.push_back(static_cast<double>(i));
        }
    }
    const ColumnInfo* columnInfo(std::size_t table, std::size_t col) const {
        if (table >= cols.size() || col >= cols[table].size()) return nullptr;
        return &cols[table][col];
    }
};

class RifColumnBasedUserData {
    std::unordered_map<int, std::pair<std::size_t,std::size_t>> m_map;
    std::unique_ptr<Parser> m_parser;
public:
    explicit RifColumnBasedUserData(std::size_t num_values)
        : m_parser(std::make_unique<Parser>(num_values)) {
        m_map[0] = {0,0};
    }

    bool values(const int& resultAddress, std::vector<double>* values) const;
};

#endif


Previous attempt info:
Original execution time: mean = 7410.40 ms, std = 83.40 ms