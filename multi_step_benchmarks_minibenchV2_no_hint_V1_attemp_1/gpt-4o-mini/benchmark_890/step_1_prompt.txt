You are an expert C++ performance engineer. Optimize the provided code for high compute and resource performance while preserving behavior. The optimized function must keep the exact same signature as the hand-written implementation. If the original file contains explicit template instantiations, reproduce them unchanged at the end of the optimized file. This prompt may include compilation errors, runtime errors or timing data from the previous step. Use it to refine the code. If it is empty, produce an initial optimization based solely on the original source. When refining the code, explore potentially high-reward optimization paths that have not yet been tried and that could yield superior computational performance. Respond only with a JSON object using the keys "optimized_code" and "analysis". The "analysis" field should briefly explain the intent behind your modifications. Additional source files may be provided for context. Here are the files:

// hash_common.hpp
#pragma once
#include <vector>
#include <unordered_map>
#include <tuple>
#include <set>
#include <cstdint>
#include <cstring>
#include <string>

using hash_t = uint64_t;

inline std::tuple<hash_t*, int>
allhash_unsorted_64_fast(const char* seq, int len, const std::vector<int>& kmer) {
    hash_t* arr = new hash_t[len];
    uint64_t h = 14695981039346656037ull;
    for (int i = 0; i < len; ++i) {
        h ^= static_cast<unsigned char>(seq[i % len]);
        h *= 1099511628211ull;
        arr[i] = h % 16384;
    }
    return {arr, len};
}

void hash_sequences(std::vector<std::string>& keys,
        std::vector<char*>& seqs,
        std::vector<int>& lengths,
        std::vector<hash_t*>& hashes,
        std::vector<int>& hash_lengths,
        std::vector<int>& kmer,
        std::unordered_map<hash_t,int>& read_hash_to_depth,
        std::unordered_map<hash_t,int>& ref_to_sample_depth,
        bool doReadDepth,
        bool doReferenceDepth);


// original.cpp
#include "hash_common.hpp"
#include <omp.h>

void hash_sequences(std::vector<std::string>& keys,
        std::vector<char*>& seqs,
        std::vector<int>& lengths,
        std::vector<hash_t*>& hashes,
        std::vector<int>& hash_lengths,
        std::vector<int>& kmer,
        std::unordered_map<hash_t,int>& read_hash_to_depth,
        std::unordered_map<hash_t,int>& ref_to_sample_depth,
        bool doReadDepth,
        bool doReferenceDepth) {

    #pragma omp parallel for
    for (int i = 0; i < static_cast<int>(keys.size()); i++) {
        auto hashes_and_num = allhash_unsorted_64_fast(seqs[i], lengths[i], kmer);
        hashes[i] = std::get<0>(hashes_and_num);
        hash_lengths[i] = std::get<1>(hashes_and_num);
        if (doReadDepth) {
            #pragma omp critical
            {
                for (int j = 0; j < hash_lengths[i]; j++) {
                    #pragma omp atomic
                    read_hash_to_depth[hashes[i][j]]++;
                }
            }
        } else if (doReferenceDepth) {
            std::set<hash_t> sample_set(hashes[i], hashes[i] + hash_lengths[i]);
            #pragma omp critical
            {
                for (auto x : sample_set) {
                    #pragma omp atomic
                    ref_to_sample_depth[x]++;
                }
            }
        }
        delete[] hashes[i];
    }
}



The following files are provided for context. Do NOT modify them. Only update code in original.cpp.

// harness.cpp
#include "hash_common.hpp"
#include <chrono>
#include <iostream>
#include <random>
#include <string>
#include <omp.h>

void hash_sequences(std::vector<std::string>& keys,
        std::vector<char*>& seqs,
        std::vector<int>& lengths,
        std::vector<hash_t*>& hashes,
        std::vector<int>& hash_lengths,
        std::vector<int>& kmer,
        std::unordered_map<hash_t,int>& read_hash_to_depth,
        std::unordered_map<hash_t,int>& ref_to_sample_depth,
        bool doReadDepth,
        bool doReferenceDepth);

std::vector<char*> make_seqs(int count, int len) {
    std::vector<char*> seqs(count);
    std::mt19937 gen(42);
    std::uniform_int_distribution<int> dist(0,3);
    const char bases[4] = {'A','C','G','T'};
    for (int i=0;i<count;++i) {
        seqs[i] = new char[len];
        for (int j=0;j<len;++j) seqs[i][j] = bases[dist(gen)];
    }
    return seqs;
}

int main(int argc, char* argv[]) {
    std::string mode = "perf";
    int seq_count = 400;
    int seq_len = 256;
    int repeat = 1000;

    for (int i=1;i<argc;++i) {
        std::string arg = argv[i];
        if (arg == "--mode=correct") mode = "correct";
        else if (arg == "--mode=perf") mode = "perf";
        else if (arg.rfind("--seqs=",0)==0) seq_count = std::stoi(arg.substr(7));
        else if (arg.rfind("--len=",0)==0) seq_len = std::stoi(arg.substr(6));
        else if (arg.rfind("--repeat=",0)==0) repeat = std::stoi(arg.substr(9));
    }

    std::vector<std::string> keys(seq_count);
    for (int i=0;i<seq_count;++i) keys[i] = "s" + std::to_string(i);
    std::vector<char*> seqs = make_seqs(seq_count, seq_len);
    std::vector<int> lengths(seq_count, seq_len);
    std::vector<hash_t*> hashes(seq_count);
    std::vector<int> hash_lengths(seq_count);
    std::vector<int> kmer = {3};
    std::unordered_map<hash_t,int> read_hash_to_depth;
    std::unordered_map<hash_t,int> ref_to_sample_depth;

    if (mode == "correct") {
        hash_sequences(keys, seqs, lengths, hashes, hash_lengths, kmer,
                       read_hash_to_depth, ref_to_sample_depth, true, false);
        long long sum = 0;
        for (auto& kv : read_hash_to_depth) sum += kv.second;
        std::cout << sum << '\n';
    } else {
        using clock = std::chrono::high_resolution_clock;
        long long dummy = 0;
        auto t1 = clock::now();
        for (int r=0; r<repeat; ++r) {
            hash_sequences(keys, seqs, lengths, hashes, hash_lengths, kmer,
                           read_hash_to_depth, ref_to_sample_depth, true, false);
            dummy += read_hash_to_depth.begin()->second;
        }
        auto t2 = clock::now();
        std::cout << "Time: "
                  << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
                  << " ms\n";
        if (dummy == 123456789) std::cerr << "";
    }

    for (char* s : seqs) delete[] s;
    return 0;
}



// hash_common.hpp
#pragma once
#include <vector>
#include <unordered_map>
#include <tuple>
#include <set>
#include <cstdint>
#include <cstring>
#include <string>

using hash_t = uint64_t;

inline std::tuple<hash_t*, int>
allhash_unsorted_64_fast(const char* seq, int len, const std::vector<int>& kmer) {
    hash_t* arr = new hash_t[len];
    uint64_t h = 14695981039346656037ull;
    for (int i = 0; i < len; ++i) {
        h ^= static_cast<unsigned char>(seq[i % len]);
        h *= 1099511628211ull;
        arr[i] = h % 16384;
    }
    return {arr, len};
}

void hash_sequences(std::vector<std::string>& keys,
        std::vector<char*>& seqs,
        std::vector<int>& lengths,
        std::vector<hash_t*>& hashes,
        std::vector<int>& hash_lengths,
        std::vector<int>& kmer,
        std::unordered_map<hash_t,int>& read_hash_to_depth,
        std::unordered_map<hash_t,int>& ref_to_sample_depth,
        bool doReadDepth,
        bool doReferenceDepth);


Previous attempt info:
Original execution time: mean = 3878.40 ms, std = 199.90 ms